;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 23/05/2018 17:48:35
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2B67      	GOTO       871
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00BA      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00B9      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A1      	MOVWF      33
0x000D	0x087C      	MOVF       R12, 0
0x000E	0x00A0      	MOVWF      32
0x000F	0x0804      	MOVF       FSR, 0
0x0010	0x00A2      	MOVWF      34
;source_file_PICmid_proj03.c,109 :: 		void interrupt()
;source_file_PICmid_proj03.c,111 :: 		if(TMR0IF_bit)                              //Houve o estouro do Timer0?
0x0011	0x1D0B      	BTFSS      TMR0IF_bit, 2
0x0012	0x2853      	GOTO       L_interrupt0
;source_file_PICmid_proj03.c,114 :: 		TMR0IF_bit   = 0x00;                     //Limpa flag
0x0013	0x110B      	BCF        TMR0IF_bit, 2
;source_file_PICmid_proj03.c,115 :: 		TMR0         = 0x06;                     //Reinicia Timer0
0x0014	0x3006      	MOVLW      6
0x0015	0x0081      	MOVWF      TMR0
;source_file_PICmid_proj03.c,116 :: 		counter_T0  += 0x01;                     //Incrementa counter_T0
0x0016	0x0AB4      	INCF       _counter_T0, 1
0x0017	0x1903      	BTFSC      STATUS, 2
0x0018	0x0AB5      	INCF       _counter_T0+1, 1
;source_file_PICmid_proj03.c,117 :: 		counter_bk  += 0x01;                     //Incrementa counter_bk
0x0019	0x0AB3      	INCF       _counter_bk, 1
;source_file_PICmid_proj03.c,120 :: 		multiplex();                             //chama função de multiplexação
0x001A	0x2213      	CALL       _multiplex
;source_file_PICmid_proj03.c,122 :: 		if(counter_bk == 100)                    //counter_bk igual a 100?
0x001B	0x0833      	MOVF       _counter_bk, 0
0x001C	0x3A64      	XORLW      100
0x001D	0x1D03      	BTFSS      STATUS, 2
0x001E	0x2822      	GOTO       L_interrupt1
;source_file_PICmid_proj03.c,124 :: 		counter_bk = 0x00;                    //reinicia counter_bk
0x001F	0x01B3      	CLRF       _counter_bk
;source_file_PICmid_proj03.c,127 :: 		blk = ~blk;                           //inverte blk (parâmetro a ser ajustado pisca)
0x0020	0x3080      	MOVLW      128
0x0021	0x06A8      	XORWF      _flagsA, 1
;source_file_PICmid_proj03.c,129 :: 		} //end if counter_bk
L_interrupt1:
;source_file_PICmid_proj03.c,131 :: 		if(counter_T0 == 250)                    //counter igual a 250?
0x0022	0x3000      	MOVLW      0
0x0023	0x0635      	XORWF      _counter_T0+1, 0
0x0024	0x1D03      	BTFSS      STATUS, 2
0x0025	0x2828      	GOTO       L__interrupt161
0x0026	0x30FA      	MOVLW      250
0x0027	0x0634      	XORWF      _counter_T0, 0
L__interrupt161:
0x0028	0x1D03      	BTFSS      STATUS, 2
0x0029	0x2853      	GOTO       L_interrupt2
;source_file_PICmid_proj03.c,133 :: 		counter_T0 = 0x00;                    //reinicia counter
0x002A	0x01B4      	CLRF       _counter_T0
0x002B	0x01B5      	CLRF       _counter_T0+1
;source_file_PICmid_proj03.c,136 :: 		debug_clk = ~debug_clk;               //inverte o estado da saída de debug
0x002C	0x3001      	MOVLW      1
0x002D	0x0687      	XORWF      RC0_bit, 1
;source_file_PICmid_proj03.c,138 :: 		if(!debug_clk) relogio();             //chama função do relógio quando debug_clk for low
0x002E	0x1807      	BTFSC      RC0_bit, 0
0x002F	0x2831      	GOTO       L_interrupt3
0x0030	0x2331      	CALL       _relogio
L_interrupt3:
;source_file_PICmid_proj03.c,142 :: 		if(plus_f) adj_count+=1;              //incrementa adj_count, se plus_f setada
0x0031	0x1C28      	BTFSS      _flagsA, 0
0x0032	0x2834      	GOTO       L_interrupt4
0x0033	0x0AA3      	INCF       _adj_count, 1
L_interrupt4:
;source_file_PICmid_proj03.c,143 :: 		if(adj_count == 4)                    //adj_count igual a 4?
0x0034	0x0823      	MOVF       _adj_count, 0
0x0035	0x3A04      	XORLW      4
0x0036	0x1D03      	BTFSS      STATUS, 2
0x0037	0x283B      	GOTO       L_interrupt5
;source_file_PICmid_proj03.c,145 :: 		adj_count = 0x00;                  //reinicia
0x0038	0x01A3      	CLRF       _adj_count
;source_file_PICmid_proj03.c,146 :: 		run_sys   = ~run_sys;              //inverte estado de run_sys
0x0039	0x3040      	MOVLW      64
0x003A	0x06A8      	XORWF      _flagsA, 1
;source_file_PICmid_proj03.c,148 :: 		} //end if adj_count
L_interrupt5:
;source_file_PICmid_proj03.c,151 :: 		if(feed)                              //feed setada?
0x003B	0x1EA8      	BTFSS      _flagsA, 5
0x003C	0x2841      	GOTO       L_interrupt6
;source_file_PICmid_proj03.c,153 :: 		run_sys = 0;                       //limpa run_sys
0x003D	0x1328      	BCF        _flagsA, 6
;source_file_PICmid_proj03.c,154 :: 		feed_count+=1;                     //incrementa feed_count
0x003E	0x0AB2      	INCF       _feed_count, 1
;source_file_PICmid_proj03.c,155 :: 		buzz  = 0x01;                      //aciona buzzer
0x003F	0x1487      	BSF        RC1_bit, 1
;source_file_PICmid_proj03.c,156 :: 		motor = 0x01;                      //aciona motor
0x0040	0x1685      	BSF        RA5_bit, 5
;source_file_PICmid_proj03.c,158 :: 		} //end if feed
L_interrupt6:
;source_file_PICmid_proj03.c,160 :: 		if(feed_count == 20)                  //feed_count chegou em 20?
0x0041	0x0832      	MOVF       _feed_count, 0
0x0042	0x3A14      	XORLW      20
0x0043	0x1D03      	BTFSS      STATUS, 2
0x0044	0x2849      	GOTO       L_interrupt7
;source_file_PICmid_proj03.c,162 :: 		feed_count = 0x00;                 //limpa feed_count
0x0045	0x01B2      	CLRF       _feed_count
;source_file_PICmid_proj03.c,163 :: 		buzz  = 0x00;                      //desliga buzzer
0x0046	0x1087      	BCF        RC1_bit, 1
;source_file_PICmid_proj03.c,164 :: 		motor = 0x00;                      //desliga motor
0x0047	0x1285      	BCF        RA5_bit, 5
;source_file_PICmid_proj03.c,165 :: 		feed = 0x00;                       //limpa flag feed
0x0048	0x12A8      	BCF        _flagsA, 5
;source_file_PICmid_proj03.c,167 :: 		} //end feed_count
L_interrupt7:
;source_file_PICmid_proj03.c,170 :: 		if(feed2) feed_count2+=1;             //incrementa feed_count2, se feed2 setada
0x0049	0x1E28      	BTFSS      _flagsA, 4
0x004A	0x284C      	GOTO       L_interrupt8
0x004B	0x0AAD      	INCF       _feed_count2, 1
L_interrupt8:
;source_file_PICmid_proj03.c,172 :: 		if(feed_count2 == 140)                //feed_count2 chegou em 140?
0x004C	0x082D      	MOVF       _feed_count2, 0
0x004D	0x3A8C      	XORLW      140
0x004E	0x1D03      	BTFSS      STATUS, 2
0x004F	0x2853      	GOTO       L_interrupt9
;source_file_PICmid_proj03.c,174 :: 		feed_count2 = 0x00;                //limpa feed_count2
0x0050	0x01AD      	CLRF       _feed_count2
;source_file_PICmid_proj03.c,175 :: 		run_sys     = 0x01;                //seta run_sys
0x0051	0x1728      	BSF        _flagsA, 6
;source_file_PICmid_proj03.c,176 :: 		feed2       = 0x00;                //limpa flag feed2
0x0052	0x1228      	BCF        _flagsA, 4
;source_file_PICmid_proj03.c,178 :: 		} //end if feed_count2
L_interrupt9:
;source_file_PICmid_proj03.c,180 :: 		} //end if counter
L_interrupt2:
;source_file_PICmid_proj03.c,183 :: 		} //end if TMR0IF_bit
L_interrupt0:
;source_file_PICmid_proj03.c,185 :: 		} //end interrupt
L__interrupt160:
0x0053	0x0821      	MOVF       33, 0
0x0054	0x00F0      	MOVWF      R0
0x0055	0x0820      	MOVF       32, 0
0x0056	0x00FC      	MOVWF      R12
0x0057	0x0822      	MOVF       34, 0
0x0058	0x0084      	MOVWF      FSR
0x0059	0x0839      	MOVF       ___savePCLATH, 0
0x005A	0x008A      	MOVWF      PCLATH
0x005B	0x0E3A      	SWAPF      ___saveSTATUS, 0
0x005C	0x0083      	MOVWF      STATUS
0x005D	0x0EFF      	SWAPF      R15, 1
0x005E	0x0E7F      	SWAPF      R15, 0
0x005F	0x0009      	RETFIE
; end of _interrupt
_disp_cath:
;source_file_PICmid_proj03.c,529 :: 		char disp_cath(char num)
;source_file_PICmid_proj03.c,543 :: 		0x67};                 //BCD nove   '9'
0x0060	0x303F      	MOVLW      63
0x0061	0x1283      	BCF        STATUS, 5
0x0062	0x1303      	BCF        STATUS, 6
0x0063	0x00C2      	MOVWF      disp_cath_segmento_L0
0x0064	0x3006      	MOVLW      6
0x0065	0x00C3      	MOVWF      disp_cath_segmento_L0+1
0x0066	0x305B      	MOVLW      91
0x0067	0x00C4      	MOVWF      disp_cath_segmento_L0+2
0x0068	0x304F      	MOVLW      79
0x0069	0x00C5      	MOVWF      disp_cath_segmento_L0+3
0x006A	0x3066      	MOVLW      102
0x006B	0x00C6      	MOVWF      disp_cath_segmento_L0+4
0x006C	0x306D      	MOVLW      109
0x006D	0x00C7      	MOVWF      disp_cath_segmento_L0+5
0x006E	0x307D      	MOVLW      125
0x006F	0x00C8      	MOVWF      disp_cath_segmento_L0+6
0x0070	0x3007      	MOVLW      7
0x0071	0x00C9      	MOVWF      disp_cath_segmento_L0+7
0x0072	0x307F      	MOVLW      127
0x0073	0x00CA      	MOVWF      disp_cath_segmento_L0+8
0x0074	0x3067      	MOVLW      103
0x0075	0x00CB      	MOVWF      disp_cath_segmento_L0+9
;source_file_PICmid_proj03.c,546 :: 		cathode = segmento[num];                   //salva dado BCD em cathode
0x0076	0x0841      	MOVF       FARG_disp_cath_num, 0
0x0077	0x3E42      	ADDLW      disp_cath_segmento_L0
0x0078	0x0084      	MOVWF      FSR
;source_file_PICmid_proj03.c,548 :: 		return(cathode);                           //retorna o número BCD
0x0079	0x0800      	MOVF       INDF, 0
0x007A	0x00F0      	MOVWF      R0
;source_file_PICmid_proj03.c,550 :: 		} //end display
0x007B	0x0008      	RETURN
; end of _disp_cath
_Div_8x8_U:
;__Lib_Math.c,189 :: 		
;__Lib_Math.c,196 :: 		
0x007C	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,197 :: 		
0x007D	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,198 :: 		
0x007E	0x01F8      	CLRF       R8
;__Lib_Math.c,199 :: 		
0x007F	0x3008      	MOVLW      8
;__Lib_Math.c,200 :: 		
0x0080	0x00FC      	MOVWF      R12
;__Lib_Math.c,201 :: 		
0x0081	0x0D70      	RLF        R0, 0
;__Lib_Math.c,202 :: 		
0x0082	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,203 :: 		
0x0083	0x0874      	MOVF       R4, 0
;__Lib_Math.c,204 :: 		
0x0084	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,205 :: 		
0x0085	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,206 :: 		
0x0086	0x2889      	GOTO       $+3
;__Lib_Math.c,207 :: 		
0x0087	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,208 :: 		
0x0088	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,209 :: 		
0x0089	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,210 :: 		
0x008A	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,211 :: 		
0x008B	0x2881      	GOTO       $-10
;__Lib_Math.c,213 :: 		
0x008C	0x0008      	RETURN
; end of _Div_8x8_U
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x008D	0x1283      	BCF        STATUS, 5
0x008E	0x1303      	BCF        STATUS, 6
0x008F	0x0840      	MOVF       ___DoICPAddr+1, 0
0x0090	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0091	0x083F      	MOVF       ___DoICPAddr, 0
0x0092	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
0x0093	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,24 :: 		
;__Lib_System.c,27 :: 		
_CC2D_Loop1:
;__Lib_System.c,29 :: 		
0x0094	0x208D      	CALL       _____DoICP
0x0095	0x118A      	BCF        PCLATH, 3
0x0096	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,31 :: 		
0x0097	0x0080      	MOVWF      INDF
;__Lib_System.c,32 :: 		
0x0098	0x0A84      	INCF       FSR, 1
;__Lib_System.c,33 :: 		
0x0099	0x0ABF      	INCF       ___DoICPAddr, 1
;__Lib_System.c,35 :: 		
0x009A	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,36 :: 		
0x009B	0x0AC0      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,37 :: 		
0x009C	0x03F0      	DECF       R0, 1
;__Lib_System.c,39 :: 		
0x009D	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,40 :: 		
0x009E	0x2894      	GOTO       _CC2D_Loop1
;__Lib_System.c,42 :: 		
0x009F	0x0008      	RETURN
; end of ___CC2DW
_update_data:
;source_file_PICmid_proj03.c,237 :: 		void update_data()
;source_file_PICmid_proj03.c,239 :: 		switch(new_prog)
0x00A0	0x28F0      	GOTO       L_update_data13
;source_file_PICmid_proj03.c,241 :: 		case 1:
L_update_data15:
;source_file_PICmid_proj03.c,242 :: 		hr_disp   = horas_0;
0x00A1	0x1283      	BCF        STATUS, 5
0x00A2	0x1303      	BCF        STATUS, 6
0x00A3	0x0836      	MOVF       _horas_0, 0
0x00A4	0x00B1      	MOVWF      _hr_disp
;source_file_PICmid_proj03.c,243 :: 		mn_disp   = minutos_0;
0x00A5	0x0837      	MOVF       _minutos_0, 0
0x00A6	0x00B0      	MOVWF      _mn_disp
;source_file_PICmid_proj03.c,244 :: 		break;
0x00A7	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,245 :: 		case 2:
L_update_data16:
;source_file_PICmid_proj03.c,246 :: 		delay_ms(741);
0x00A8	0x3010      	MOVLW      16
0x00A9	0x00FB      	MOVWF      R11
0x00AA	0x300A      	MOVLW      10
0x00AB	0x00FC      	MOVWF      R12
0x00AC	0x304D      	MOVLW      77
0x00AD	0x00FD      	MOVWF      R13
L_update_data17:
0x00AE	0x0BFD      	DECFSZ     R13, 1
0x00AF	0x28AE      	GOTO       L_update_data17
0x00B0	0x0BFC      	DECFSZ     R12, 1
0x00B1	0x28AE      	GOTO       L_update_data17
0x00B2	0x0BFB      	DECFSZ     R11, 1
0x00B3	0x28AE      	GOTO       L_update_data17
;source_file_PICmid_proj03.c,247 :: 		new_prog+=1;
0x00B4	0x0AA5      	INCF       _new_prog, 1
;source_file_PICmid_proj03.c,248 :: 		break;
0x00B5	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,249 :: 		case 3:
L_update_data18:
;source_file_PICmid_proj03.c,250 :: 		hr_disp   = horas_1;
0x00B6	0x0838      	MOVF       _horas_1, 0
0x00B7	0x00B1      	MOVWF      _hr_disp
;source_file_PICmid_proj03.c,251 :: 		mn_disp   = minutos_1;
0x00B8	0x0829      	MOVF       _minutos_1, 0
0x00B9	0x00B0      	MOVWF      _mn_disp
;source_file_PICmid_proj03.c,252 :: 		break;
0x00BA	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,253 :: 		case 4:
L_update_data19:
;source_file_PICmid_proj03.c,254 :: 		delay_ms(741);
0x00BB	0x3010      	MOVLW      16
0x00BC	0x00FB      	MOVWF      R11
0x00BD	0x300A      	MOVLW      10
0x00BE	0x00FC      	MOVWF      R12
0x00BF	0x304D      	MOVLW      77
0x00C0	0x00FD      	MOVWF      R13
L_update_data20:
0x00C1	0x0BFD      	DECFSZ     R13, 1
0x00C2	0x28C1      	GOTO       L_update_data20
0x00C3	0x0BFC      	DECFSZ     R12, 1
0x00C4	0x28C1      	GOTO       L_update_data20
0x00C5	0x0BFB      	DECFSZ     R11, 1
0x00C6	0x28C1      	GOTO       L_update_data20
;source_file_PICmid_proj03.c,255 :: 		new_prog+=1;
0x00C7	0x0AA5      	INCF       _new_prog, 1
;source_file_PICmid_proj03.c,256 :: 		break;
0x00C8	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,257 :: 		case 5:
L_update_data21:
;source_file_PICmid_proj03.c,258 :: 		hr_disp   = horas_2;
0x00C9	0x0827      	MOVF       _horas_2, 0
0x00CA	0x00B1      	MOVWF      _hr_disp
;source_file_PICmid_proj03.c,259 :: 		mn_disp   = minutos_2;
0x00CB	0x082C      	MOVF       _minutos_2, 0
0x00CC	0x00B0      	MOVWF      _mn_disp
;source_file_PICmid_proj03.c,260 :: 		break;
0x00CD	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,261 :: 		case 6:
L_update_data22:
;source_file_PICmid_proj03.c,262 :: 		delay_ms(741);
0x00CE	0x3010      	MOVLW      16
0x00CF	0x00FB      	MOVWF      R11
0x00D0	0x300A      	MOVLW      10
0x00D1	0x00FC      	MOVWF      R12
0x00D2	0x304D      	MOVLW      77
0x00D3	0x00FD      	MOVWF      R13
L_update_data23:
0x00D4	0x0BFD      	DECFSZ     R13, 1
0x00D5	0x28D4      	GOTO       L_update_data23
0x00D6	0x0BFC      	DECFSZ     R12, 1
0x00D7	0x28D4      	GOTO       L_update_data23
0x00D8	0x0BFB      	DECFSZ     R11, 1
0x00D9	0x28D4      	GOTO       L_update_data23
;source_file_PICmid_proj03.c,263 :: 		new_prog+=1;
0x00DA	0x0AA5      	INCF       _new_prog, 1
;source_file_PICmid_proj03.c,264 :: 		break;
0x00DB	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,265 :: 		case 7:
L_update_data24:
;source_file_PICmid_proj03.c,266 :: 		hr_disp   = horas_3;
0x00DC	0x082B      	MOVF       _horas_3, 0
0x00DD	0x00B1      	MOVWF      _hr_disp
;source_file_PICmid_proj03.c,267 :: 		mn_disp   = minutos_3;
0x00DE	0x082A      	MOVF       _minutos_3, 0
0x00DF	0x00B0      	MOVWF      _mn_disp
;source_file_PICmid_proj03.c,268 :: 		break;
0x00E0	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,269 :: 		case 8:
L_update_data25:
;source_file_PICmid_proj03.c,270 :: 		delay_ms(741);
0x00E1	0x3010      	MOVLW      16
0x00E2	0x00FB      	MOVWF      R11
0x00E3	0x300A      	MOVLW      10
0x00E4	0x00FC      	MOVWF      R12
0x00E5	0x304D      	MOVLW      77
0x00E6	0x00FD      	MOVWF      R13
L_update_data26:
0x00E7	0x0BFD      	DECFSZ     R13, 1
0x00E8	0x28E7      	GOTO       L_update_data26
0x00E9	0x0BFC      	DECFSZ     R12, 1
0x00EA	0x28E7      	GOTO       L_update_data26
0x00EB	0x0BFB      	DECFSZ     R11, 1
0x00EC	0x28E7      	GOTO       L_update_data26
;source_file_PICmid_proj03.c,271 :: 		new_prog=1;
0x00ED	0x3001      	MOVLW      1
0x00EE	0x00A5      	MOVWF      _new_prog
;source_file_PICmid_proj03.c,272 :: 		break;
0x00EF	0x2912      	GOTO       L_update_data14
;source_file_PICmid_proj03.c,274 :: 		} //end switch new_prog
L_update_data13:
0x00F0	0x1283      	BCF        STATUS, 5
0x00F1	0x1303      	BCF        STATUS, 6
0x00F2	0x0825      	MOVF       _new_prog, 0
0x00F3	0x3A01      	XORLW      1
0x00F4	0x1903      	BTFSC      STATUS, 2
0x00F5	0x28A1      	GOTO       L_update_data15
0x00F6	0x0825      	MOVF       _new_prog, 0
0x00F7	0x3A02      	XORLW      2
0x00F8	0x1903      	BTFSC      STATUS, 2
0x00F9	0x28A8      	GOTO       L_update_data16
0x00FA	0x0825      	MOVF       _new_prog, 0
0x00FB	0x3A03      	XORLW      3
0x00FC	0x1903      	BTFSC      STATUS, 2
0x00FD	0x28B6      	GOTO       L_update_data18
0x00FE	0x0825      	MOVF       _new_prog, 0
0x00FF	0x3A04      	XORLW      4
0x0100	0x1903      	BTFSC      STATUS, 2
0x0101	0x28BB      	GOTO       L_update_data19
0x0102	0x0825      	MOVF       _new_prog, 0
0x0103	0x3A05      	XORLW      5
0x0104	0x1903      	BTFSC      STATUS, 2
0x0105	0x28C9      	GOTO       L_update_data21
0x0106	0x0825      	MOVF       _new_prog, 0
0x0107	0x3A06      	XORLW      6
0x0108	0x1903      	BTFSC      STATUS, 2
0x0109	0x28CE      	GOTO       L_update_data22
0x010A	0x0825      	MOVF       _new_prog, 0
0x010B	0x3A07      	XORLW      7
0x010C	0x1903      	BTFSC      STATUS, 2
0x010D	0x28DC      	GOTO       L_update_data24
0x010E	0x0825      	MOVF       _new_prog, 0
0x010F	0x3A08      	XORLW      8
0x0110	0x1903      	BTFSC      STATUS, 2
0x0111	0x28E1      	GOTO       L_update_data25
L_update_data14:
;source_file_PICmid_proj03.c,277 :: 		} //end update_data
0x0112	0x0008      	RETURN
; end of _update_data
_read_bts:
;source_file_PICmid_proj03.c,282 :: 		void read_bts()
;source_file_PICmid_proj03.c,284 :: 		if(!plus)      plus_f      = 0x01;          //seta flag plus_f, se plus pressionado
0x0113	0x1283      	BCF        STATUS, 5
0x0114	0x1303      	BCF        STATUS, 6
0x0115	0x1805      	BTFSC      RA0_bit, 0
0x0116	0x2918      	GOTO       L_read_bts27
0x0117	0x1428      	BSF        _flagsA, 0
L_read_bts27:
;source_file_PICmid_proj03.c,285 :: 		if(!adj_watch) adj_watch_f = 0x01;          //seta flag adj_watch_f, se adj_watch pressionado
0x0118	0x1885      	BTFSC      RA1_bit, 1
0x0119	0x291B      	GOTO       L_read_bts28
0x011A	0x14A8      	BSF        _flagsA, 1
L_read_bts28:
;source_file_PICmid_proj03.c,286 :: 		if(!adj_prog)  adj_prog_f  = 0x01;          //seta flag adj_prog_f, se adj_prog pressionado
0x011B	0x1905      	BTFSC      RA2_bit, 2
0x011C	0x291E      	GOTO       L_read_bts29
0x011D	0x1528      	BSF        _flagsA, 2
L_read_bts29:
;source_file_PICmid_proj03.c,288 :: 		if(plus && plus_f)                          //botão plus solto e flag setada?
0x011E	0x1C05      	BTFSS      RA0_bit, 0
0x011F	0x29DA      	GOTO       L_read_bts32
0x0120	0x1C28      	BTFSS      _flagsA, 0
0x0121	0x29DA      	GOTO       L_read_bts32
L__read_bts150:
;source_file_PICmid_proj03.c,290 :: 		plus_f = 0x00;                           //limpa flag
0x0122	0x1028      	BCF        _flagsA, 0
;source_file_PICmid_proj03.c,291 :: 		adj_count  = 0x00;                       //reinicia contador de ajuste
0x0123	0x01A3      	CLRF       _adj_count
;source_file_PICmid_proj03.c,293 :: 		switch(adj_num)                          //verifica adj_num
0x0124	0x2995      	GOTO       L_read_bts33
;source_file_PICmid_proj03.c,295 :: 		case 1:                               //caso 1 incrementa a dezena das horas
L_read_bts35:
;source_file_PICmid_proj03.c,296 :: 		switch(new_prog)
0x0125	0x2932      	GOTO       L_read_bts36
;source_file_PICmid_proj03.c,298 :: 		case 1: horas_0  += 10; break;
L_read_bts38:
0x0126	0x300A      	MOVLW      10
0x0127	0x07B6      	ADDWF      _horas_0, 1
0x0128	0x2942      	GOTO       L_read_bts37
;source_file_PICmid_proj03.c,299 :: 		case 3: horas_1  += 10; break;
L_read_bts39:
0x0129	0x300A      	MOVLW      10
0x012A	0x07B8      	ADDWF      _horas_1, 1
0x012B	0x2942      	GOTO       L_read_bts37
;source_file_PICmid_proj03.c,300 :: 		case 5: horas_2  += 10; break;
L_read_bts40:
0x012C	0x300A      	MOVLW      10
0x012D	0x07A7      	ADDWF      _horas_2, 1
0x012E	0x2942      	GOTO       L_read_bts37
;source_file_PICmid_proj03.c,301 :: 		case 7: horas_3  += 10; break;
L_read_bts41:
0x012F	0x300A      	MOVLW      10
0x0130	0x07AB      	ADDWF      _horas_3, 1
0x0131	0x2942      	GOTO       L_read_bts37
;source_file_PICmid_proj03.c,303 :: 		} //end switch new_prog
L_read_bts36:
0x0132	0x0825      	MOVF       _new_prog, 0
0x0133	0x3A01      	XORLW      1
0x0134	0x1903      	BTFSC      STATUS, 2
0x0135	0x2926      	GOTO       L_read_bts38
0x0136	0x0825      	MOVF       _new_prog, 0
0x0137	0x3A03      	XORLW      3
0x0138	0x1903      	BTFSC      STATUS, 2
0x0139	0x2929      	GOTO       L_read_bts39
0x013A	0x0825      	MOVF       _new_prog, 0
0x013B	0x3A05      	XORLW      5
0x013C	0x1903      	BTFSC      STATUS, 2
0x013D	0x292C      	GOTO       L_read_bts40
0x013E	0x0825      	MOVF       _new_prog, 0
0x013F	0x3A07      	XORLW      7
0x0140	0x1903      	BTFSC      STATUS, 2
0x0141	0x292F      	GOTO       L_read_bts41
L_read_bts37:
;source_file_PICmid_proj03.c,304 :: 		break;
0x0142	0x29A5      	GOTO       L_read_bts34
;source_file_PICmid_proj03.c,306 :: 		case 2:                               //caso 2 incrementa a unidade das horas
L_read_bts42:
;source_file_PICmid_proj03.c,307 :: 		switch(new_prog)
0x0143	0x294C      	GOTO       L_read_bts43
;source_file_PICmid_proj03.c,309 :: 		case 1: horas_0  += 1; break;
L_read_bts45:
0x0144	0x0AB6      	INCF       _horas_0, 1
0x0145	0x295C      	GOTO       L_read_bts44
;source_file_PICmid_proj03.c,310 :: 		case 3: horas_1  += 1; break;
L_read_bts46:
0x0146	0x0AB8      	INCF       _horas_1, 1
0x0147	0x295C      	GOTO       L_read_bts44
;source_file_PICmid_proj03.c,311 :: 		case 5: horas_2  += 1; break;
L_read_bts47:
0x0148	0x0AA7      	INCF       _horas_2, 1
0x0149	0x295C      	GOTO       L_read_bts44
;source_file_PICmid_proj03.c,312 :: 		case 7: horas_3  += 1; break;
L_read_bts48:
0x014A	0x0AAB      	INCF       _horas_3, 1
0x014B	0x295C      	GOTO       L_read_bts44
;source_file_PICmid_proj03.c,314 :: 		} //end switch new_prog
L_read_bts43:
0x014C	0x0825      	MOVF       _new_prog, 0
0x014D	0x3A01      	XORLW      1
0x014E	0x1903      	BTFSC      STATUS, 2
0x014F	0x2944      	GOTO       L_read_bts45
0x0150	0x0825      	MOVF       _new_prog, 0
0x0151	0x3A03      	XORLW      3
0x0152	0x1903      	BTFSC      STATUS, 2
0x0153	0x2946      	GOTO       L_read_bts46
0x0154	0x0825      	MOVF       _new_prog, 0
0x0155	0x3A05      	XORLW      5
0x0156	0x1903      	BTFSC      STATUS, 2
0x0157	0x2948      	GOTO       L_read_bts47
0x0158	0x0825      	MOVF       _new_prog, 0
0x0159	0x3A07      	XORLW      7
0x015A	0x1903      	BTFSC      STATUS, 2
0x015B	0x294A      	GOTO       L_read_bts48
L_read_bts44:
;source_file_PICmid_proj03.c,315 :: 		break;
0x015C	0x29A5      	GOTO       L_read_bts34
;source_file_PICmid_proj03.c,317 :: 		case 3:                               //caso 3 incrementa a dezena dos minutos
L_read_bts49:
;source_file_PICmid_proj03.c,318 :: 		switch(new_prog)
0x015D	0x296A      	GOTO       L_read_bts50
;source_file_PICmid_proj03.c,320 :: 		case 1: minutos_0 += 10; break;
L_read_bts52:
0x015E	0x300A      	MOVLW      10
0x015F	0x07B7      	ADDWF      _minutos_0, 1
0x0160	0x297A      	GOTO       L_read_bts51
;source_file_PICmid_proj03.c,321 :: 		case 3: minutos_1 += 10; break;
L_read_bts53:
0x0161	0x300A      	MOVLW      10
0x0162	0x07A9      	ADDWF      _minutos_1, 1
0x0163	0x297A      	GOTO       L_read_bts51
;source_file_PICmid_proj03.c,322 :: 		case 5: minutos_2 += 10; break;
L_read_bts54:
0x0164	0x300A      	MOVLW      10
0x0165	0x07AC      	ADDWF      _minutos_2, 1
0x0166	0x297A      	GOTO       L_read_bts51
;source_file_PICmid_proj03.c,323 :: 		case 7: minutos_3 += 10; break;
L_read_bts55:
0x0167	0x300A      	MOVLW      10
0x0168	0x07AA      	ADDWF      _minutos_3, 1
0x0169	0x297A      	GOTO       L_read_bts51
;source_file_PICmid_proj03.c,325 :: 		} //end switch new_prog
L_read_bts50:
0x016A	0x0825      	MOVF       _new_prog, 0
0x016B	0x3A01      	XORLW      1
0x016C	0x1903      	BTFSC      STATUS, 2
0x016D	0x295E      	GOTO       L_read_bts52
0x016E	0x0825      	MOVF       _new_prog, 0
0x016F	0x3A03      	XORLW      3
0x0170	0x1903      	BTFSC      STATUS, 2
0x0171	0x2961      	GOTO       L_read_bts53
0x0172	0x0825      	MOVF       _new_prog, 0
0x0173	0x3A05      	XORLW      5
0x0174	0x1903      	BTFSC      STATUS, 2
0x0175	0x2964      	GOTO       L_read_bts54
0x0176	0x0825      	MOVF       _new_prog, 0
0x0177	0x3A07      	XORLW      7
0x0178	0x1903      	BTFSC      STATUS, 2
0x0179	0x2967      	GOTO       L_read_bts55
L_read_bts51:
;source_file_PICmid_proj03.c,326 :: 		break;
0x017A	0x29A5      	GOTO       L_read_bts34
;source_file_PICmid_proj03.c,328 :: 		case 4:                               //caso 4 incrementa a unidade dos minutos
L_read_bts56:
;source_file_PICmid_proj03.c,329 :: 		switch(new_prog)
0x017B	0x2984      	GOTO       L_read_bts57
;source_file_PICmid_proj03.c,331 :: 		case 1: minutos_0 += 1; break;
L_read_bts59:
0x017C	0x0AB7      	INCF       _minutos_0, 1
0x017D	0x2994      	GOTO       L_read_bts58
;source_file_PICmid_proj03.c,332 :: 		case 3: minutos_1 += 1; break;
L_read_bts60:
0x017E	0x0AA9      	INCF       _minutos_1, 1
0x017F	0x2994      	GOTO       L_read_bts58
;source_file_PICmid_proj03.c,333 :: 		case 5: minutos_2 += 1; break;
L_read_bts61:
0x0180	0x0AAC      	INCF       _minutos_2, 1
0x0181	0x2994      	GOTO       L_read_bts58
;source_file_PICmid_proj03.c,334 :: 		case 7: minutos_3 += 1; break;
L_read_bts62:
0x0182	0x0AAA      	INCF       _minutos_3, 1
0x0183	0x2994      	GOTO       L_read_bts58
;source_file_PICmid_proj03.c,336 :: 		} //end switch new_prog
L_read_bts57:
0x0184	0x0825      	MOVF       _new_prog, 0
0x0185	0x3A01      	XORLW      1
0x0186	0x1903      	BTFSC      STATUS, 2
0x0187	0x297C      	GOTO       L_read_bts59
0x0188	0x0825      	MOVF       _new_prog, 0
0x0189	0x3A03      	XORLW      3
0x018A	0x1903      	BTFSC      STATUS, 2
0x018B	0x297E      	GOTO       L_read_bts60
0x018C	0x0825      	MOVF       _new_prog, 0
0x018D	0x3A05      	XORLW      5
0x018E	0x1903      	BTFSC      STATUS, 2
0x018F	0x2980      	GOTO       L_read_bts61
0x0190	0x0825      	MOVF       _new_prog, 0
0x0191	0x3A07      	XORLW      7
0x0192	0x1903      	BTFSC      STATUS, 2
0x0193	0x2982      	GOTO       L_read_bts62
L_read_bts58:
;source_file_PICmid_proj03.c,337 :: 		break;
0x0194	0x29A5      	GOTO       L_read_bts34
;source_file_PICmid_proj03.c,339 :: 		} //end switch
L_read_bts33:
0x0195	0x0826      	MOVF       _adj_num, 0
0x0196	0x3A01      	XORLW      1
0x0197	0x1903      	BTFSC      STATUS, 2
0x0198	0x2925      	GOTO       L_read_bts35
0x0199	0x0826      	MOVF       _adj_num, 0
0x019A	0x3A02      	XORLW      2
0x019B	0x1903      	BTFSC      STATUS, 2
0x019C	0x2943      	GOTO       L_read_bts42
0x019D	0x0826      	MOVF       _adj_num, 0
0x019E	0x3A03      	XORLW      3
0x019F	0x1903      	BTFSC      STATUS, 2
0x01A0	0x295D      	GOTO       L_read_bts49
0x01A1	0x0826      	MOVF       _adj_num, 0
0x01A2	0x3A04      	XORLW      4
0x01A3	0x1903      	BTFSC      STATUS, 2
0x01A4	0x297B      	GOTO       L_read_bts56
L_read_bts34:
;source_file_PICmid_proj03.c,341 :: 		delay_ms(50);                            //anti-bouncing
0x01A5	0x3002      	MOVLW      2
0x01A6	0x00FB      	MOVWF      R11
0x01A7	0x3004      	MOVLW      4
0x01A8	0x00FC      	MOVWF      R12
0x01A9	0x30BA      	MOVLW      186
0x01AA	0x00FD      	MOVWF      R13
L_read_bts63:
0x01AB	0x0BFD      	DECFSZ     R13, 1
0x01AC	0x29AB      	GOTO       L_read_bts63
0x01AD	0x0BFC      	DECFSZ     R12, 1
0x01AE	0x29AB      	GOTO       L_read_bts63
0x01AF	0x0BFB      	DECFSZ     R11, 1
0x01B0	0x29AB      	GOTO       L_read_bts63
0x01B1	0x0000      	NOP
;source_file_PICmid_proj03.c,343 :: 		if(horas_0 > 23)   horas_0   = 0;        //se horas maior que 23, volta para 0
0x01B2	0x0836      	MOVF       _horas_0, 0
0x01B3	0x3C17      	SUBLW      23
0x01B4	0x1803      	BTFSC      STATUS, 0
0x01B5	0x29B7      	GOTO       L_read_bts64
0x01B6	0x01B6      	CLRF       _horas_0
L_read_bts64:
;source_file_PICmid_proj03.c,344 :: 		if(minutos_0 > 59) minutos_0 = 0;        //se minutos maior que 59, volta para 0
0x01B7	0x0837      	MOVF       _minutos_0, 0
0x01B8	0x3C3B      	SUBLW      59
0x01B9	0x1803      	BTFSC      STATUS, 0
0x01BA	0x29BC      	GOTO       L_read_bts65
0x01BB	0x01B7      	CLRF       _minutos_0
L_read_bts65:
;source_file_PICmid_proj03.c,345 :: 		if(horas_1 > 23)   horas_1   = 0;        //se horas maior que 23, volta para 0
0x01BC	0x0838      	MOVF       _horas_1, 0
0x01BD	0x3C17      	SUBLW      23
0x01BE	0x1803      	BTFSC      STATUS, 0
0x01BF	0x29C1      	GOTO       L_read_bts66
0x01C0	0x01B8      	CLRF       _horas_1
L_read_bts66:
;source_file_PICmid_proj03.c,346 :: 		if(minutos_1 > 59) minutos_1 = 0;        //se minutos maior que 59, volta para 0
0x01C1	0x0829      	MOVF       _minutos_1, 0
0x01C2	0x3C3B      	SUBLW      59
0x01C3	0x1803      	BTFSC      STATUS, 0
0x01C4	0x29C6      	GOTO       L_read_bts67
0x01C5	0x01A9      	CLRF       _minutos_1
L_read_bts67:
;source_file_PICmid_proj03.c,347 :: 		if(horas_2 > 23)   horas_2   = 0;        //se horas maior que 23, volta para 0
0x01C6	0x0827      	MOVF       _horas_2, 0
0x01C7	0x3C17      	SUBLW      23
0x01C8	0x1803      	BTFSC      STATUS, 0
0x01C9	0x29CB      	GOTO       L_read_bts68
0x01CA	0x01A7      	CLRF       _horas_2
L_read_bts68:
;source_file_PICmid_proj03.c,348 :: 		if(minutos_2 > 59) minutos_2 = 0;        //se minutos maior que 59, volta para 0
0x01CB	0x082C      	MOVF       _minutos_2, 0
0x01CC	0x3C3B      	SUBLW      59
0x01CD	0x1803      	BTFSC      STATUS, 0
0x01CE	0x29D0      	GOTO       L_read_bts69
0x01CF	0x01AC      	CLRF       _minutos_2
L_read_bts69:
;source_file_PICmid_proj03.c,349 :: 		if(horas_3 > 23)   horas_3   = 0;        //se horas maior que 23, volta para 0
0x01D0	0x082B      	MOVF       _horas_3, 0
0x01D1	0x3C17      	SUBLW      23
0x01D2	0x1803      	BTFSC      STATUS, 0
0x01D3	0x29D5      	GOTO       L_read_bts70
0x01D4	0x01AB      	CLRF       _horas_3
L_read_bts70:
;source_file_PICmid_proj03.c,350 :: 		if(minutos_3 > 59) minutos_3 = 0;        //se minutos maior que 59, volta para 0
0x01D5	0x082A      	MOVF       _minutos_3, 0
0x01D6	0x3C3B      	SUBLW      59
0x01D7	0x1803      	BTFSC      STATUS, 0
0x01D8	0x29DA      	GOTO       L_read_bts71
0x01D9	0x01AA      	CLRF       _minutos_3
L_read_bts71:
;source_file_PICmid_proj03.c,352 :: 		} //end if plus
L_read_bts32:
;source_file_PICmid_proj03.c,354 :: 		if(adj_watch && adj_watch_f)                //botão adj_watch solto e flag setada?
0x01DA	0x1C85      	BTFSS      RA1_bit, 1
0x01DB	0x29F2      	GOTO       L_read_bts74
0x01DC	0x1CA8      	BTFSS      _flagsA, 1
0x01DD	0x29F2      	GOTO       L_read_bts74
L__read_bts149:
;source_file_PICmid_proj03.c,356 :: 		adj_watch_f = 0x00;                      //limpa flag
0x01DE	0x10A8      	BCF        _flagsA, 1
;source_file_PICmid_proj03.c,358 :: 		adj_num += 1;                            //incrementa adj_num
0x01DF	0x0AA6      	INCF       _adj_num, 1
;source_file_PICmid_proj03.c,360 :: 		delay_ms(50);                            //anti-bouncing
0x01E0	0x3002      	MOVLW      2
0x01E1	0x00FB      	MOVWF      R11
0x01E2	0x3004      	MOVLW      4
0x01E3	0x00FC      	MOVWF      R12
0x01E4	0x30BA      	MOVLW      186
0x01E5	0x00FD      	MOVWF      R13
L_read_bts75:
0x01E6	0x0BFD      	DECFSZ     R13, 1
0x01E7	0x29E6      	GOTO       L_read_bts75
0x01E8	0x0BFC      	DECFSZ     R12, 1
0x01E9	0x29E6      	GOTO       L_read_bts75
0x01EA	0x0BFB      	DECFSZ     R11, 1
0x01EB	0x29E6      	GOTO       L_read_bts75
0x01EC	0x0000      	NOP
;source_file_PICmid_proj03.c,363 :: 		if(adj_num > 4) adj_num = 0;             //se adj_num maior que 4, volta para 0
0x01ED	0x0826      	MOVF       _adj_num, 0
0x01EE	0x3C04      	SUBLW      4
0x01EF	0x1803      	BTFSC      STATUS, 0
0x01F0	0x29F2      	GOTO       L_read_bts76
0x01F1	0x01A6      	CLRF       _adj_num
L_read_bts76:
;source_file_PICmid_proj03.c,366 :: 		} //end if adj_watch
L_read_bts74:
;source_file_PICmid_proj03.c,368 :: 		if(adj_prog && adj_prog_f)                  //botão adj_prog solto e flag setada?
0x01F2	0x1D05      	BTFSS      RA2_bit, 2
0x01F3	0x2A12      	GOTO       L_read_bts79
0x01F4	0x1D28      	BTFSS      _flagsA, 2
0x01F5	0x2A12      	GOTO       L_read_bts79
L__read_bts148:
;source_file_PICmid_proj03.c,370 :: 		adj_prog_f = 0x00;                       //limpa flag
0x01F6	0x1128      	BCF        _flagsA, 2
;source_file_PICmid_proj03.c,373 :: 		new_prog += 1;                           //incrementa new_prog
0x01F7	0x0AA5      	INCF       _new_prog, 1
;source_file_PICmid_proj03.c,374 :: 		run_prog += 1;                           //incrementa run_prog
0x01F8	0x0AA4      	INCF       _run_prog, 1
;source_file_PICmid_proj03.c,376 :: 		delay_ms(50);                            //anti-boucing
0x01F9	0x3002      	MOVLW      2
0x01FA	0x00FB      	MOVWF      R11
0x01FB	0x3004      	MOVLW      4
0x01FC	0x00FC      	MOVWF      R12
0x01FD	0x30BA      	MOVLW      186
0x01FE	0x00FD      	MOVWF      R13
L_read_bts80:
0x01FF	0x0BFD      	DECFSZ     R13, 1
0x0200	0x29FF      	GOTO       L_read_bts80
0x0201	0x0BFC      	DECFSZ     R12, 1
0x0202	0x29FF      	GOTO       L_read_bts80
0x0203	0x0BFB      	DECFSZ     R11, 1
0x0204	0x29FF      	GOTO       L_read_bts80
0x0205	0x0000      	NOP
;source_file_PICmid_proj03.c,378 :: 		if(new_prog > 8) new_prog = 1;
0x0206	0x0825      	MOVF       _new_prog, 0
0x0207	0x3C08      	SUBLW      8
0x0208	0x1803      	BTFSC      STATUS, 0
0x0209	0x2A0C      	GOTO       L_read_bts81
0x020A	0x3001      	MOVLW      1
0x020B	0x00A5      	MOVWF      _new_prog
L_read_bts81:
;source_file_PICmid_proj03.c,379 :: 		if(run_prog > 2) run_prog = 1;
0x020C	0x0824      	MOVF       _run_prog, 0
0x020D	0x3C02      	SUBLW      2
0x020E	0x1803      	BTFSC      STATUS, 0
0x020F	0x2A12      	GOTO       L_read_bts82
0x0210	0x3001      	MOVLW      1
0x0211	0x00A4      	MOVWF      _run_prog
L_read_bts82:
;source_file_PICmid_proj03.c,381 :: 		} //end if adj_prog
L_read_bts79:
;source_file_PICmid_proj03.c,384 :: 		} //end read_bts
0x0212	0x0008      	RETURN
; end of _read_bts
_multiplex:
;source_file_PICmid_proj03.c,389 :: 		void multiplex()
;source_file_PICmid_proj03.c,394 :: 		if(!dig_mil && control == 1)                //Dígito dos milhares desligado?
0x0213	0x1283      	BCF        STATUS, 5
0x0214	0x1303      	BCF        STATUS, 6
0x0215	0x1B87      	BTFSC      RC7_bit, 7
0x0216	0x2A52      	GOTO       L_multiplex85
0x0217	0x082E      	MOVF       multiplex_control_L0, 0
0x0218	0x3A01      	XORLW      1
0x0219	0x1D03      	BTFSS      STATUS, 2
0x021A	0x2A52      	GOTO       L_multiplex85
L__multiplex159:
;source_file_PICmid_proj03.c,396 :: 		control = 0x02;                          //Sim, control recebe o valor 2
0x021B	0x3002      	MOVLW      2
0x021C	0x00AE      	MOVWF      multiplex_control_L0
;source_file_PICmid_proj03.c,397 :: 		dig_pts = 0x00;                          //Apaga dígito dos pontos
0x021D	0x1187      	BCF        RC3_bit, 3
;source_file_PICmid_proj03.c,398 :: 		dig_uni = 0x00;                          //Apaga dígito das unidades
0x021E	0x1207      	BCF        RC4_bit, 4
;source_file_PICmid_proj03.c,399 :: 		dig_dez = 0x00;                          //Apaga dígito das dezenas
0x021F	0x1287      	BCF        RC5_bit, 5
;source_file_PICmid_proj03.c,400 :: 		dig_cen = 0x00;                          //Apaga dígito das centenas
0x0220	0x1307      	BCF        RC6_bit, 6
;source_file_PICmid_proj03.c,401 :: 		PORTB   = 0x00;                          //Desliga PORTB
0x0221	0x0186      	CLRF       PORTB
;source_file_PICmid_proj03.c,402 :: 		mil = (hr_disp/10);                      //Calcula o dígito do milhar
0x0222	0x300A      	MOVLW      10
0x0223	0x00F4      	MOVWF      R4
0x0224	0x0831      	MOVF       _hr_disp, 0
0x0225	0x00F0      	MOVWF      R0
0x0226	0x207C      	CALL       _Div_8x8_U
0x0227	0x0870      	MOVF       R0, 0
0x0228	0x00BC      	MOVWF      _mil
;source_file_PICmid_proj03.c,403 :: 		dig_mil = 0x01;                          //Ativa dígito dos milhares
0x0229	0x1787      	BSF        RC7_bit, 7
;source_file_PICmid_proj03.c,405 :: 		switch(new_prog)                         //verifica new_prog
0x022A	0x2A40      	GOTO       L_multiplex86
;source_file_PICmid_proj03.c,407 :: 		case 2:
L_multiplex88:
;source_file_PICmid_proj03.c,408 :: 		case 4:
L_multiplex89:
;source_file_PICmid_proj03.c,409 :: 		case 6: PORTB = 0x73; break;          //caso 2/4/6, imprime "P"
L_multiplex90:
0x022B	0x3073      	MOVLW      115
0x022C	0x0086      	MOVWF      PORTB
0x022D	0x2A51      	GOTO       L_multiplex87
;source_file_PICmid_proj03.c,410 :: 		case 8: PORTB = 0x74; break;          //caso 8    , imprime "h"
L_multiplex91:
0x022E	0x3074      	MOVLW      116
0x022F	0x0086      	MOVWF      PORTB
0x0230	0x2A51      	GOTO       L_multiplex87
;source_file_PICmid_proj03.c,412 :: 		default:                              //demais casos
L_multiplex92:
;source_file_PICmid_proj03.c,413 :: 		if(adj_num != 1 || !blk)           //se adj_num diferente de 1 ou blk em low...
0x0231	0x0826      	MOVF       _adj_num, 0
0x0232	0x3A01      	XORLW      1
0x0233	0x1D03      	BTFSS      STATUS, 2
0x0234	0x2A38      	GOTO       L__multiplex158
0x0235	0x1FA8      	BTFSS      _flagsA, 7
0x0236	0x2A38      	GOTO       L__multiplex158
0x0237	0x2A3E      	GOTO       L_multiplex95
L__multiplex158:
;source_file_PICmid_proj03.c,414 :: 		PORTB = disp_cath(mil);          //...escreve o valor no display
0x0238	0x083C      	MOVF       _mil, 0
0x0239	0x00C1      	MOVWF      FARG_disp_cath_num
0x023A	0x2060      	CALL       _disp_cath
0x023B	0x0870      	MOVF       R0, 0
0x023C	0x0086      	MOVWF      PORTB
0x023D	0x2A3F      	GOTO       L_multiplex96
L_multiplex95:
;source_file_PICmid_proj03.c,415 :: 		else PORTB = 0;                    //senão, limpa display
0x023E	0x0186      	CLRF       PORTB
L_multiplex96:
;source_file_PICmid_proj03.c,417 :: 		} //end switch
0x023F	0x2A51      	GOTO       L_multiplex87
L_multiplex86:
0x0240	0x0825      	MOVF       _new_prog, 0
0x0241	0x3A02      	XORLW      2
0x0242	0x1903      	BTFSC      STATUS, 2
0x0243	0x2A2B      	GOTO       L_multiplex88
0x0244	0x0825      	MOVF       _new_prog, 0
0x0245	0x3A04      	XORLW      4
0x0246	0x1903      	BTFSC      STATUS, 2
0x0247	0x2A2B      	GOTO       L_multiplex89
0x0248	0x0825      	MOVF       _new_prog, 0
0x0249	0x3A06      	XORLW      6
0x024A	0x1903      	BTFSC      STATUS, 2
0x024B	0x2A2B      	GOTO       L_multiplex90
0x024C	0x0825      	MOVF       _new_prog, 0
0x024D	0x3A08      	XORLW      8
0x024E	0x1903      	BTFSC      STATUS, 2
0x024F	0x2A2E      	GOTO       L_multiplex91
0x0250	0x2A31      	GOTO       L_multiplex92
L_multiplex87:
;source_file_PICmid_proj03.c,419 :: 		} //end dig mil
0x0251	0x2B30      	GOTO       L_multiplex97
L_multiplex85:
;source_file_PICmid_proj03.c,421 :: 		else if(!dig_cen && control == 2)           //Dígito das centenas desligado?
0x0252	0x1B07      	BTFSC      RC6_bit, 6
0x0253	0x2A91      	GOTO       L_multiplex100
0x0254	0x082E      	MOVF       multiplex_control_L0, 0
0x0255	0x3A02      	XORLW      2
0x0256	0x1D03      	BTFSS      STATUS, 2
0x0257	0x2A91      	GOTO       L_multiplex100
L__multiplex157:
;source_file_PICmid_proj03.c,423 :: 		control = 0x03;                          //Sim, control recebe o valor 3
0x0258	0x3003      	MOVLW      3
0x0259	0x00AE      	MOVWF      multiplex_control_L0
;source_file_PICmid_proj03.c,424 :: 		dig_pts = 0x00;                          //Apaga dígito dos pontos
0x025A	0x1187      	BCF        RC3_bit, 3
;source_file_PICmid_proj03.c,425 :: 		dig_uni = 0x00;                          //Apaga dígito das unidades
0x025B	0x1207      	BCF        RC4_bit, 4
;source_file_PICmid_proj03.c,426 :: 		dig_dez = 0x00;                          //Apaga dígito das dezenas
0x025C	0x1287      	BCF        RC5_bit, 5
;source_file_PICmid_proj03.c,427 :: 		dig_mil = 0x00;                          //Apaga dígito dos milhares
0x025D	0x1387      	BCF        RC7_bit, 7
;source_file_PICmid_proj03.c,428 :: 		PORTB   = 0x00;                          //Desliga PORTB
0x025E	0x0186      	CLRF       PORTB
;source_file_PICmid_proj03.c,429 :: 		cen = (hr_disp%10);                      //Calcula o dígito da centena
0x025F	0x300A      	MOVLW      10
0x0260	0x00F4      	MOVWF      R4
0x0261	0x0831      	MOVF       _hr_disp, 0
0x0262	0x00F0      	MOVWF      R0
0x0263	0x207C      	CALL       _Div_8x8_U
0x0264	0x0878      	MOVF       R8, 0
0x0265	0x00F0      	MOVWF      R0
0x0266	0x0870      	MOVF       R0, 0
0x0267	0x00BB      	MOVWF      _cen
;source_file_PICmid_proj03.c,430 :: 		dig_cen = 0x01;                          //Ativa dígito das centenas
0x0268	0x1707      	BSF        RC6_bit, 6
;source_file_PICmid_proj03.c,432 :: 		switch(new_prog)                         //verifica new_prog
0x0269	0x2A7F      	GOTO       L_multiplex101
;source_file_PICmid_proj03.c,434 :: 		case 2:
L_multiplex103:
;source_file_PICmid_proj03.c,435 :: 		case 4:
L_multiplex104:
;source_file_PICmid_proj03.c,436 :: 		case 6: PORTB = 0x50; break;          //caso 2/4/6, imprime "r"
L_multiplex105:
0x026A	0x3050      	MOVLW      80
0x026B	0x0086      	MOVWF      PORTB
0x026C	0x2A90      	GOTO       L_multiplex102
;source_file_PICmid_proj03.c,437 :: 		case 8: PORTB = 0x5C; break;          //caso 8    , imprime "o"
L_multiplex106:
0x026D	0x305C      	MOVLW      92
0x026E	0x0086      	MOVWF      PORTB
0x026F	0x2A90      	GOTO       L_multiplex102
;source_file_PICmid_proj03.c,439 :: 		default:                              //demais casos
L_multiplex107:
;source_file_PICmid_proj03.c,440 :: 		if(adj_num != 2 || !blk)           //se adj_num diferente de 2 ou blk em low...
0x0270	0x0826      	MOVF       _adj_num, 0
0x0271	0x3A02      	XORLW      2
0x0272	0x1D03      	BTFSS      STATUS, 2
0x0273	0x2A77      	GOTO       L__multiplex156
0x0274	0x1FA8      	BTFSS      _flagsA, 7
0x0275	0x2A77      	GOTO       L__multiplex156
0x0276	0x2A7D      	GOTO       L_multiplex110
L__multiplex156:
;source_file_PICmid_proj03.c,441 :: 		PORTB = disp_cath(cen);          //...escreve o valor no display
0x0277	0x083B      	MOVF       _cen, 0
0x0278	0x00C1      	MOVWF      FARG_disp_cath_num
0x0279	0x2060      	CALL       _disp_cath
0x027A	0x0870      	MOVF       R0, 0
0x027B	0x0086      	MOVWF      PORTB
0x027C	0x2A7E      	GOTO       L_multiplex111
L_multiplex110:
;source_file_PICmid_proj03.c,442 :: 		else PORTB = 0;                    //senão, limpa display
0x027D	0x0186      	CLRF       PORTB
L_multiplex111:
;source_file_PICmid_proj03.c,444 :: 		} //end switch
0x027E	0x2A90      	GOTO       L_multiplex102
L_multiplex101:
0x027F	0x0825      	MOVF       _new_prog, 0
0x0280	0x3A02      	XORLW      2
0x0281	0x1903      	BTFSC      STATUS, 2
0x0282	0x2A6A      	GOTO       L_multiplex103
0x0283	0x0825      	MOVF       _new_prog, 0
0x0284	0x3A04      	XORLW      4
0x0285	0x1903      	BTFSC      STATUS, 2
0x0286	0x2A6A      	GOTO       L_multiplex104
0x0287	0x0825      	MOVF       _new_prog, 0
0x0288	0x3A06      	XORLW      6
0x0289	0x1903      	BTFSC      STATUS, 2
0x028A	0x2A6A      	GOTO       L_multiplex105
0x028B	0x0825      	MOVF       _new_prog, 0
0x028C	0x3A08      	XORLW      8
0x028D	0x1903      	BTFSC      STATUS, 2
0x028E	0x2A6D      	GOTO       L_multiplex106
0x028F	0x2A70      	GOTO       L_multiplex107
L_multiplex102:
;source_file_PICmid_proj03.c,447 :: 		} //end dig cen
0x0290	0x2B30      	GOTO       L_multiplex112
L_multiplex100:
;source_file_PICmid_proj03.c,449 :: 		else if(!dig_dez && control == 3)           //Dígito das dezenas desligado?
0x0291	0x1A87      	BTFSC      RC5_bit, 5
0x0292	0x2ACE      	GOTO       L_multiplex115
0x0293	0x082E      	MOVF       multiplex_control_L0, 0
0x0294	0x3A03      	XORLW      3
0x0295	0x1D03      	BTFSS      STATUS, 2
0x0296	0x2ACE      	GOTO       L_multiplex115
L__multiplex155:
;source_file_PICmid_proj03.c,451 :: 		control = 0x04;                          //Sim, control recebe o valor 4
0x0297	0x3004      	MOVLW      4
0x0298	0x00AE      	MOVWF      multiplex_control_L0
;source_file_PICmid_proj03.c,452 :: 		dig_pts = 0x00;                          //Apaga dígito dos pontos
0x0299	0x1187      	BCF        RC3_bit, 3
;source_file_PICmid_proj03.c,453 :: 		dig_uni = 0x00;                          //Apaga dígito das unidades
0x029A	0x1207      	BCF        RC4_bit, 4
;source_file_PICmid_proj03.c,454 :: 		dig_cen = 0x00;                          //Apaga dígito das centenas
0x029B	0x1307      	BCF        RC6_bit, 6
;source_file_PICmid_proj03.c,455 :: 		dig_mil = 0x00;                          //Apaga dígito dos milhares
0x029C	0x1387      	BCF        RC7_bit, 7
;source_file_PICmid_proj03.c,456 :: 		PORTB   = 0x00;                          //Desliga PORTB
0x029D	0x0186      	CLRF       PORTB
;source_file_PICmid_proj03.c,457 :: 		dez = (mn_disp/10);                      //Calcula o dígito da dezena
0x029E	0x300A      	MOVLW      10
0x029F	0x00F4      	MOVWF      R4
0x02A0	0x0830      	MOVF       _mn_disp, 0
0x02A1	0x00F0      	MOVWF      R0
0x02A2	0x207C      	CALL       _Div_8x8_U
0x02A3	0x0870      	MOVF       R0, 0
0x02A4	0x00BE      	MOVWF      _dez
;source_file_PICmid_proj03.c,458 :: 		dig_dez = 0x01;                          //Ativa dígito das dezenas
0x02A5	0x1687      	BSF        RC5_bit, 5
;source_file_PICmid_proj03.c,460 :: 		switch(new_prog)                         //verifica new_prog
0x02A6	0x2ABC      	GOTO       L_multiplex116
;source_file_PICmid_proj03.c,462 :: 		case 2:
L_multiplex118:
;source_file_PICmid_proj03.c,463 :: 		case 4:
L_multiplex119:
;source_file_PICmid_proj03.c,464 :: 		case 6: PORTB = 0x5C; break;          //caso 2/4/6, imprime "o"
L_multiplex120:
0x02A7	0x305C      	MOVLW      92
0x02A8	0x0086      	MOVWF      PORTB
0x02A9	0x2ACD      	GOTO       L_multiplex117
;source_file_PICmid_proj03.c,465 :: 		case 8: PORTB = 0x1C; break;          //caso 8    , imprime "u"
L_multiplex121:
0x02AA	0x301C      	MOVLW      28
0x02AB	0x0086      	MOVWF      PORTB
0x02AC	0x2ACD      	GOTO       L_multiplex117
;source_file_PICmid_proj03.c,467 :: 		default:                              //demais casos
L_multiplex122:
;source_file_PICmid_proj03.c,468 :: 		if(adj_num != 3 || !blk)           //se adj_num diferente de 3 ou blk em low...
0x02AD	0x0826      	MOVF       _adj_num, 0
0x02AE	0x3A03      	XORLW      3
0x02AF	0x1D03      	BTFSS      STATUS, 2
0x02B0	0x2AB4      	GOTO       L__multiplex154
0x02B1	0x1FA8      	BTFSS      _flagsA, 7
0x02B2	0x2AB4      	GOTO       L__multiplex154
0x02B3	0x2ABA      	GOTO       L_multiplex125
L__multiplex154:
;source_file_PICmid_proj03.c,469 :: 		PORTB = disp_cath(dez);          //...escreve o valor no display
0x02B4	0x083E      	MOVF       _dez, 0
0x02B5	0x00C1      	MOVWF      FARG_disp_cath_num
0x02B6	0x2060      	CALL       _disp_cath
0x02B7	0x0870      	MOVF       R0, 0
0x02B8	0x0086      	MOVWF      PORTB
0x02B9	0x2ABB      	GOTO       L_multiplex126
L_multiplex125:
;source_file_PICmid_proj03.c,470 :: 		else PORTB = 0;                    //senão, limpa display
0x02BA	0x0186      	CLRF       PORTB
L_multiplex126:
;source_file_PICmid_proj03.c,472 :: 		} //end switch
0x02BB	0x2ACD      	GOTO       L_multiplex117
L_multiplex116:
0x02BC	0x0825      	MOVF       _new_prog, 0
0x02BD	0x3A02      	XORLW      2
0x02BE	0x1903      	BTFSC      STATUS, 2
0x02BF	0x2AA7      	GOTO       L_multiplex118
0x02C0	0x0825      	MOVF       _new_prog, 0
0x02C1	0x3A04      	XORLW      4
0x02C2	0x1903      	BTFSC      STATUS, 2
0x02C3	0x2AA7      	GOTO       L_multiplex119
0x02C4	0x0825      	MOVF       _new_prog, 0
0x02C5	0x3A06      	XORLW      6
0x02C6	0x1903      	BTFSC      STATUS, 2
0x02C7	0x2AA7      	GOTO       L_multiplex120
0x02C8	0x0825      	MOVF       _new_prog, 0
0x02C9	0x3A08      	XORLW      8
0x02CA	0x1903      	BTFSC      STATUS, 2
0x02CB	0x2AAA      	GOTO       L_multiplex121
0x02CC	0x2AAD      	GOTO       L_multiplex122
L_multiplex117:
;source_file_PICmid_proj03.c,475 :: 		} //end dig dez
0x02CD	0x2B30      	GOTO       L_multiplex127
L_multiplex115:
;source_file_PICmid_proj03.c,477 :: 		else if(!dig_uni && control == 4)           //Dígito das unidades desligado?
0x02CE	0x1A07      	BTFSC      RC4_bit, 4
0x02CF	0x2B1C      	GOTO       L_multiplex130
0x02D0	0x082E      	MOVF       multiplex_control_L0, 0
0x02D1	0x3A04      	XORLW      4
0x02D2	0x1D03      	BTFSS      STATUS, 2
0x02D3	0x2B1C      	GOTO       L_multiplex130
L__multiplex153:
;source_file_PICmid_proj03.c,479 :: 		control = 0x05;                          //Sim, control recebe o valor 5
0x02D4	0x3005      	MOVLW      5
0x02D5	0x00AE      	MOVWF      multiplex_control_L0
;source_file_PICmid_proj03.c,480 :: 		dig_pts = 0x00;                          //Apaga dígito dos pontos
0x02D6	0x1187      	BCF        RC3_bit, 3
;source_file_PICmid_proj03.c,481 :: 		dig_dez = 0x00;                          //Apaga dígito das dezenas
0x02D7	0x1287      	BCF        RC5_bit, 5
;source_file_PICmid_proj03.c,482 :: 		dig_cen = 0x00;                          //Apaga dígito das centenas
0x02D8	0x1307      	BCF        RC6_bit, 6
;source_file_PICmid_proj03.c,483 :: 		dig_mil = 0x00;                          //Apaga dígito dos milhares
0x02D9	0x1387      	BCF        RC7_bit, 7
;source_file_PICmid_proj03.c,484 :: 		PORTB   = 0x00;                          //Desliga PORTB
0x02DA	0x0186      	CLRF       PORTB
;source_file_PICmid_proj03.c,485 :: 		uni = (mn_disp%10);                      //Calcula o dígito da unidade
0x02DB	0x300A      	MOVLW      10
0x02DC	0x00F4      	MOVWF      R4
0x02DD	0x0830      	MOVF       _mn_disp, 0
0x02DE	0x00F0      	MOVWF      R0
0x02DF	0x207C      	CALL       _Div_8x8_U
0x02E0	0x0878      	MOVF       R8, 0
0x02E1	0x00F0      	MOVWF      R0
0x02E2	0x0870      	MOVF       R0, 0
0x02E3	0x00BD      	MOVWF      _uni
;source_file_PICmid_proj03.c,486 :: 		dig_uni = 0x01;                          //Ativa dígito das unidades
0x02E4	0x1607      	BSF        RC4_bit, 4
;source_file_PICmid_proj03.c,488 :: 		switch(new_prog)                         //verifica new_prog
0x02E5	0x2B0A      	GOTO       L_multiplex131
;source_file_PICmid_proj03.c,490 :: 		case 2: PORTB = disp_cath(1); break;
L_multiplex133:
0x02E6	0x3001      	MOVLW      1
0x02E7	0x00C1      	MOVWF      FARG_disp_cath_num
0x02E8	0x2060      	CALL       _disp_cath
0x02E9	0x0870      	MOVF       R0, 0
0x02EA	0x0086      	MOVWF      PORTB
0x02EB	0x2B1B      	GOTO       L_multiplex132
;source_file_PICmid_proj03.c,491 :: 		case 4: PORTB = disp_cath(2); break;
L_multiplex134:
0x02EC	0x3002      	MOVLW      2
0x02ED	0x00C1      	MOVWF      FARG_disp_cath_num
0x02EE	0x2060      	CALL       _disp_cath
0x02EF	0x0870      	MOVF       R0, 0
0x02F0	0x0086      	MOVWF      PORTB
0x02F1	0x2B1B      	GOTO       L_multiplex132
;source_file_PICmid_proj03.c,492 :: 		case 6: PORTB = disp_cath(3); break;
L_multiplex135:
0x02F2	0x3003      	MOVLW      3
0x02F3	0x00C1      	MOVWF      FARG_disp_cath_num
0x02F4	0x2060      	CALL       _disp_cath
0x02F5	0x0870      	MOVF       R0, 0
0x02F6	0x0086      	MOVWF      PORTB
0x02F7	0x2B1B      	GOTO       L_multiplex132
;source_file_PICmid_proj03.c,493 :: 		case 8: PORTB = 0x50; break;          //caso 8    , imprime "r"
L_multiplex136:
0x02F8	0x3050      	MOVLW      80
0x02F9	0x0086      	MOVWF      PORTB
0x02FA	0x2B1B      	GOTO       L_multiplex132
;source_file_PICmid_proj03.c,495 :: 		default:                              //demais casos
L_multiplex137:
;source_file_PICmid_proj03.c,496 :: 		if(adj_num != 4 || !blk)           //se adj_num diferente de 4 ou blk em low...
0x02FB	0x0826      	MOVF       _adj_num, 0
0x02FC	0x3A04      	XORLW      4
0x02FD	0x1D03      	BTFSS      STATUS, 2
0x02FE	0x2B02      	GOTO       L__multiplex152
0x02FF	0x1FA8      	BTFSS      _flagsA, 7
0x0300	0x2B02      	GOTO       L__multiplex152
0x0301	0x2B08      	GOTO       L_multiplex140
L__multiplex152:
;source_file_PICmid_proj03.c,497 :: 		PORTB = disp_cath(uni);          //...escreve o valor no display
0x0302	0x083D      	MOVF       _uni, 0
0x0303	0x00C1      	MOVWF      FARG_disp_cath_num
0x0304	0x2060      	CALL       _disp_cath
0x0305	0x0870      	MOVF       R0, 0
0x0306	0x0086      	MOVWF      PORTB
0x0307	0x2B09      	GOTO       L_multiplex141
L_multiplex140:
;source_file_PICmid_proj03.c,498 :: 		else PORTB = 0;                    //senão, limpa display
0x0308	0x0186      	CLRF       PORTB
L_multiplex141:
;source_file_PICmid_proj03.c,500 :: 		} //end switch
0x0309	0x2B1B      	GOTO       L_multiplex132
L_multiplex131:
0x030A	0x0825      	MOVF       _new_prog, 0
0x030B	0x3A02      	XORLW      2
0x030C	0x1903      	BTFSC      STATUS, 2
0x030D	0x2AE6      	GOTO       L_multiplex133
0x030E	0x0825      	MOVF       _new_prog, 0
0x030F	0x3A04      	XORLW      4
0x0310	0x1903      	BTFSC      STATUS, 2
0x0311	0x2AEC      	GOTO       L_multiplex134
0x0312	0x0825      	MOVF       _new_prog, 0
0x0313	0x3A06      	XORLW      6
0x0314	0x1903      	BTFSC      STATUS, 2
0x0315	0x2AF2      	GOTO       L_multiplex135
0x0316	0x0825      	MOVF       _new_prog, 0
0x0317	0x3A08      	XORLW      8
0x0318	0x1903      	BTFSC      STATUS, 2
0x0319	0x2AF8      	GOTO       L_multiplex136
0x031A	0x2AFB      	GOTO       L_multiplex137
L_multiplex132:
;source_file_PICmid_proj03.c,503 :: 		} //end dig uni
0x031B	0x2B30      	GOTO       L_multiplex142
L_multiplex130:
;source_file_PICmid_proj03.c,506 :: 		else if(!dig_pts && control == 5)           //Dígito dos pontos desligado?
0x031C	0x1987      	BTFSC      RC3_bit, 3
0x031D	0x2B30      	GOTO       L_multiplex145
0x031E	0x082E      	MOVF       multiplex_control_L0, 0
0x031F	0x3A05      	XORLW      5
0x0320	0x1D03      	BTFSS      STATUS, 2
0x0321	0x2B30      	GOTO       L_multiplex145
L__multiplex151:
;source_file_PICmid_proj03.c,508 :: 		control = 0x01;                          //Sim, control recebe o valor 1
0x0322	0x3001      	MOVLW      1
0x0323	0x00AE      	MOVWF      multiplex_control_L0
;source_file_PICmid_proj03.c,509 :: 		dig_uni = 0x00;                          //Apaga dígito das unidades
0x0324	0x1207      	BCF        RC4_bit, 4
;source_file_PICmid_proj03.c,510 :: 		dig_dez = 0x00;                          //Apaga dígito das dezenas
0x0325	0x1287      	BCF        RC5_bit, 5
;source_file_PICmid_proj03.c,511 :: 		dig_cen = 0x00;                          //Apaga dígito das centenas
0x0326	0x1307      	BCF        RC6_bit, 6
;source_file_PICmid_proj03.c,512 :: 		dig_mil = 0x00;                          //Apaga dígito dos milhares
0x0327	0x1387      	BCF        RC7_bit, 7
;source_file_PICmid_proj03.c,513 :: 		PORTB   = 0x00;                          //Desliga PORTB
0x0328	0x0186      	CLRF       PORTB
;source_file_PICmid_proj03.c,515 :: 		dig_pts = 0x01;                          //Ativa dígito dos pontos
0x0329	0x1587      	BSF        RC3_bit, 3
;source_file_PICmid_proj03.c,517 :: 		if(!debug_clk)                           //se debug_clk em low...
0x032A	0x1807      	BTFSC      RC0_bit, 0
0x032B	0x2B2F      	GOTO       L_multiplex146
;source_file_PICmid_proj03.c,518 :: 		PORTB = 0x10;                        //...escreve o valor no display (pontos acesos)
0x032C	0x3010      	MOVLW      16
0x032D	0x0086      	MOVWF      PORTB
0x032E	0x2B30      	GOTO       L_multiplex147
L_multiplex146:
;source_file_PICmid_proj03.c,519 :: 		else  PORTB = 0;                         //senão, limpa display
0x032F	0x0186      	CLRF       PORTB
L_multiplex147:
;source_file_PICmid_proj03.c,521 :: 		} //end dig uni
L_multiplex145:
L_multiplex142:
L_multiplex127:
L_multiplex112:
L_multiplex97:
;source_file_PICmid_proj03.c,524 :: 		} //end multiplex
0x0330	0x0008      	RETURN
; end of _multiplex
_relogio:
;clockwork.c,40 :: 		void relogio()                                 //Função para controle das variáveis do relógio
;clockwork.c,42 :: 		segundos_0++;                             //Incrementa os segundos
0x0331	0x1283      	BCF        STATUS, 5
0x0332	0x1303      	BCF        STATUS, 6
0x0333	0x0AAF      	INCF       _segundos_0, 1
;clockwork.c,44 :: 		if(segundos_0 == 0x3c)                    //Segundos igual a 60?
0x0334	0x082F      	MOVF       _segundos_0, 0
0x0335	0x3A3C      	XORLW      60
0x0336	0x1D03      	BTFSS      STATUS, 2
0x0337	0x2B45      	GOTO       L_relogio0
;clockwork.c,46 :: 		segundos_0 = 0x00;                    //Reinicia os segundos
0x0338	0x01AF      	CLRF       _segundos_0
;clockwork.c,47 :: 		minutos_0++;                          //Incrementa os minutos
0x0339	0x0AB7      	INCF       _minutos_0, 1
;clockwork.c,49 :: 		if(minutos_0 == 0x3c)                 //Minutos igual a 60?
0x033A	0x0837      	MOVF       _minutos_0, 0
0x033B	0x3A3C      	XORLW      60
0x033C	0x1D03      	BTFSS      STATUS, 2
0x033D	0x2B45      	GOTO       L_relogio1
;clockwork.c,51 :: 		minutos_0 = 0x00;                  //Reinicia os minutos
0x033E	0x01B7      	CLRF       _minutos_0
;clockwork.c,52 :: 		horas_0++;                         //Incrementa as horas
0x033F	0x0AB6      	INCF       _horas_0, 1
;clockwork.c,54 :: 		if(horas_0 == 0x18) horas_0 = 0x00; //Se horas igual a 24, reinicia
0x0340	0x0836      	MOVF       _horas_0, 0
0x0341	0x3A18      	XORLW      24
0x0342	0x1D03      	BTFSS      STATUS, 2
0x0343	0x2B45      	GOTO       L_relogio2
0x0344	0x01B6      	CLRF       _horas_0
L_relogio2:
;clockwork.c,57 :: 		} //end if minutos
L_relogio1:
;clockwork.c,59 :: 		} //end if segundos
L_relogio0:
;clockwork.c,61 :: 		} //end relogio
0x0345	0x0008      	RETURN
; end of _relogio
_check_clk:
;clockwork.c,66 :: 		void check_clk()
;clockwork.c,68 :: 		if(horas_0 == horas_1 && minutos_0 == minutos_1)
0x0346	0x1283      	BCF        STATUS, 5
0x0347	0x1303      	BCF        STATUS, 6
0x0348	0x0836      	MOVF       _horas_0, 0
0x0349	0x0638      	XORWF      _horas_1, 0
0x034A	0x1D03      	BTFSS      STATUS, 2
0x034B	0x2B52      	GOTO       L_check_clk5
0x034C	0x0837      	MOVF       _minutos_0, 0
0x034D	0x0629      	XORWF      _minutos_1, 0
0x034E	0x1D03      	BTFSS      STATUS, 2
0x034F	0x2B52      	GOTO       L_check_clk5
L__check_clk14:
;clockwork.c,70 :: 		feed  = 0x01;
0x0350	0x16A8      	BSF        _flagsA, 5
;clockwork.c,71 :: 		feed2 = 0x01;
0x0351	0x1628      	BSF        _flagsA, 4
;clockwork.c,73 :: 		}
L_check_clk5:
;clockwork.c,75 :: 		if(horas_0 == horas_2 && minutos_0 == minutos_2)
0x0352	0x0836      	MOVF       _horas_0, 0
0x0353	0x0627      	XORWF      _horas_2, 0
0x0354	0x1D03      	BTFSS      STATUS, 2
0x0355	0x2B5C      	GOTO       L_check_clk8
0x0356	0x0837      	MOVF       _minutos_0, 0
0x0357	0x062C      	XORWF      _minutos_2, 0
0x0358	0x1D03      	BTFSS      STATUS, 2
0x0359	0x2B5C      	GOTO       L_check_clk8
L__check_clk13:
;clockwork.c,77 :: 		feed  = 0x01;
0x035A	0x16A8      	BSF        _flagsA, 5
;clockwork.c,78 :: 		feed2 = 0x01;
0x035B	0x1628      	BSF        _flagsA, 4
;clockwork.c,80 :: 		}
L_check_clk8:
;clockwork.c,82 :: 		if(horas_0 == horas_3 && minutos_0 == minutos_3)
0x035C	0x0836      	MOVF       _horas_0, 0
0x035D	0x062B      	XORWF      _horas_3, 0
0x035E	0x1D03      	BTFSS      STATUS, 2
0x035F	0x2B66      	GOTO       L_check_clk11
0x0360	0x0837      	MOVF       _minutos_0, 0
0x0361	0x062A      	XORWF      _minutos_3, 0
0x0362	0x1D03      	BTFSS      STATUS, 2
0x0363	0x2B66      	GOTO       L_check_clk11
L__check_clk12:
;clockwork.c,84 :: 		feed  = 0x01;
0x0364	0x16A8      	BSF        _flagsA, 5
;clockwork.c,85 :: 		feed2 = 0x01;
0x0365	0x1628      	BSF        _flagsA, 4
;clockwork.c,87 :: 		}
L_check_clk11:
;clockwork.c,92 :: 		}
0x0366	0x0008      	RETURN
; end of _check_clk
_main:
0x0367	0x1283      	BCF        STATUS, 5
0x0368	0x1303      	BCF        STATUS, 6
0x0369	0x01A3      	CLRF       _adj_count
0x036A	0x3001      	MOVLW      1
0x036B	0x00A4      	MOVWF      _run_prog
0x036C	0x3001      	MOVLW      1
0x036D	0x00A5      	MOVWF      _new_prog
0x036E	0x01A6      	CLRF       _adj_num
0x036F	0x01A7      	CLRF       _horas_2
0x0370	0x01A8      	CLRF       _flagsA
0x0371	0x01A9      	CLRF       _minutos_1
0x0372	0x01AA      	CLRF       _minutos_3
0x0373	0x01AB      	CLRF       _horas_3
0x0374	0x01AC      	CLRF       _minutos_2
0x0375	0x01AD      	CLRF       _feed_count2
0x0376	0x3001      	MOVLW      1
0x0377	0x00AE      	MOVWF      multiplex_control_L0
0x0378	0x01AF      	CLRF       _segundos_0
0x0379	0x01B0      	CLRF       _mn_disp
0x037A	0x01B1      	CLRF       _hr_disp
0x037B	0x01B2      	CLRF       _feed_count
0x037C	0x01B3      	CLRF       _counter_bk
0x037D	0x01B4      	CLRF       _counter_T0
0x037E	0x01B5      	CLRF       53
0x037F	0x01B6      	CLRF       _horas_0
0x0380	0x01B7      	CLRF       _minutos_0
0x0381	0x01B8      	CLRF       _horas_1
;source_file_PICmid_proj03.c,190 :: 		void main()
;source_file_PICmid_proj03.c,193 :: 		CMCON        = 0x07;                        //Desabilita comparadores
0x0382	0x3007      	MOVLW      7
0x0383	0x1683      	BSF        STATUS, 5
0x0384	0x009C      	MOVWF      CMCON
;source_file_PICmid_proj03.c,194 :: 		ADCON1       = 0x07;                        //Configura todos I/Os como digitais
0x0385	0x3007      	MOVLW      7
0x0386	0x009F      	MOVWF      ADCON1
;source_file_PICmid_proj03.c,196 :: 		OPTION_REG   = 0x84;                        //Desabilita resistores de pull-up internos, prescaler 1:32 associado ao Timer0
0x0387	0x3084      	MOVLW      132
0x0388	0x0081      	MOVWF      OPTION_REG
;source_file_PICmid_proj03.c,197 :: 		GIE_bit      = 0x01;                        //Habilita interrupção global
0x0389	0x178B      	BSF        GIE_bit, 7
;source_file_PICmid_proj03.c,198 :: 		TMR0IE_bit   = 0x01;                        //Habilita interrupção do timer0
0x038A	0x168B      	BSF        TMR0IE_bit, 5
;source_file_PICmid_proj03.c,199 :: 		TMR0         = 0x06;                        //Inicializa Timer0 em 6
0x038B	0x3006      	MOVLW      6
0x038C	0x1283      	BCF        STATUS, 5
0x038D	0x0081      	MOVWF      TMR0
;source_file_PICmid_proj03.c,208 :: 		TRISA.RA5    = 0x00;                        //Configura RA5 como saída digital
0x038E	0x1683      	BSF        STATUS, 5
0x038F	0x1285      	BCF        TRISA, 5
;source_file_PICmid_proj03.c,209 :: 		motor        = 0x00;                        //motor inicia desligado
0x0390	0x1283      	BCF        STATUS, 5
0x0391	0x1285      	BCF        RA5_bit, 5
;source_file_PICmid_proj03.c,210 :: 		TRISB        = 0x80;                        //Configura todo PORTB como saída, exceto RB7
0x0392	0x3080      	MOVLW      128
0x0393	0x1683      	BSF        STATUS, 5
0x0394	0x0086      	MOVWF      TRISB
;source_file_PICmid_proj03.c,211 :: 		PORTB        = 0x80;                        //Inicializa PORTB
0x0395	0x3080      	MOVLW      128
0x0396	0x1283      	BCF        STATUS, 5
0x0397	0x0086      	MOVWF      PORTB
;source_file_PICmid_proj03.c,212 :: 		TRISC        = 0x00;                        //Configura todo PORTD como saída
0x0398	0x1683      	BSF        STATUS, 5
0x0399	0x0187      	CLRF       TRISC
;source_file_PICmid_proj03.c,213 :: 		PORTC        = 0x00;                        //Inicializa PORTC
0x039A	0x1283      	BCF        STATUS, 5
0x039B	0x0187      	CLRF       PORTC
;source_file_PICmid_proj03.c,216 :: 		while(1)                                    //Loop Infinito
L_main10:
;source_file_PICmid_proj03.c,218 :: 		read_bts();                              //lê botões
0x039C	0x2113      	CALL       _read_bts
;source_file_PICmid_proj03.c,219 :: 		update_data();                           //atualiza dados
0x039D	0x20A0      	CALL       _update_data
;source_file_PICmid_proj03.c,221 :: 		if(run_sys) check_clk();                 //compara horários, se run_sys setada
0x039E	0x1F28      	BTFSS      _flagsA, 6
0x039F	0x2BA1      	GOTO       L_main12
0x03A0	0x2346      	CALL       _check_clk
L_main12:
;source_file_PICmid_proj03.c,223 :: 		led = run_sys;                           //led recebe o estado atual de run_sys
0x03A1	0x1B28      	BTFSC      _flagsA, 6
0x03A2	0x2BA5      	GOTO       L__main162
0x03A3	0x1107      	BCF        RC2_bit, 2
0x03A4	0x2BA6      	GOTO       L__main163
L__main162:
0x03A5	0x1507      	BSF        RC2_bit, 2
L__main163:
;source_file_PICmid_proj03.c,225 :: 		} //end while
0x03A6	0x2B9C      	GOTO       L_main10
;source_file_PICmid_proj03.c,228 :: 		} //end main
0x03A7	0x2BA7      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [92]    _interrupt
0x0060      [28]    _disp_cath
0x007C      [17]    _Div_8x8_U
0x008D       [7]    _____DoICP
0x0094      [12]    ___CC2DW
0x00A0     [115]    _update_data
0x0113     [256]    _read_bts
0x0213     [286]    _multiplex
0x0331      [21]    _relogio
0x0346      [33]    _check_clk
0x0367      [65]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [0]    DC_bit
0x0003       [0]    C_bit
0x0003       [0]    RP1_bit
0x0003       [0]    IRP_bit
0x0003       [1]    STATUS
0x0003       [0]    RP0_bit
0x0003       [0]    Z_bit
0x0003       [0]    NOT_PD_bit
0x0003       [0]    NOT_TO_bit
0x0004       [1]    FSR
0x0004       [1]    FSRPTR
0x0005       [1]    PORTA
0x0005       [0]    RA2_bit
0x0005       [0]    RA1_bit
0x0005       [0]    RA3_bit
0x0005       [0]    RA5_bit
0x0005       [0]    RA4_bit
0x0005       [0]    RA0_bit
0x0006       [0]    RB0_bit
0x0006       [0]    RB5_bit
0x0006       [0]    RB4_bit
0x0006       [0]    RB6_bit
0x0006       [0]    RB3_bit
0x0006       [0]    RB2_bit
0x0006       [0]    RB1_bit
0x0006       [1]    PORTB
0x0006       [0]    RB7_bit
0x0007       [0]    RC2_bit
0x0007       [0]    RC3_bit
0x0007       [0]    RC4_bit
0x0007       [0]    RC6_bit
0x0007       [0]    RC5_bit
0x0007       [1]    PORTC
0x0007       [0]    RC1_bit
0x0007       [0]    RC0_bit
0x0007       [0]    RC7_bit
0x000A       [1]    PCLATH
0x000B       [0]    INTE_bit
0x000B       [0]    RBIE_bit
0x000B       [0]    TMR0IE_bit
0x000B       [0]    T0IF_bit
0x000B       [0]    GIE_bit
0x000B       [0]    T0IE_bit
0x000B       [1]    INTCON
0x000B       [0]    PEIE_bit
0x000B       [0]    TMR0IF_bit
0x000B       [0]    INTF_bit
0x000B       [0]    RBIF_bit
0x000C       [1]    PIR1
0x000C       [0]    CCP1IF_bit
0x000C       [0]    TMR2IF_bit
0x000C       [0]    TMR1IF_bit
0x000C       [0]    TXIF_bit
0x000C       [0]    RCIF_bit
0x000C       [0]    ADIF_bit
0x000C       [0]    SSPIF_bit
0x000D       [0]    CCP2IF_bit
0x000D       [1]    PIR2
0x000D       [0]    CMIF_bit
0x000D       [0]    EEIF_bit
0x000D       [0]    BCLIF_bit
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [0]    T1OSCEN_bit
0x0010       [0]    NOT_T1SYNC_bit
0x0010       [0]    T1CKPS0_bit
0x0010       [1]    T1CON
0x0010       [0]    T1CKPS1_bit
0x0010       [0]    TMR1CS_bit
0x0010       [0]    TMR1ON_bit
0x0010       [0]    T1INSYNC_bit
0x0010       [0]    T1SYNC_bit
0x0011       [1]    TMR2
0x0012       [0]    T2CKPS1_bit
0x0012       [0]    TMR2ON_bit
0x0012       [1]    T2CON
0x0012       [0]    T2CKPS0_bit
0x0012       [0]    TOUTPS2_bit
0x0012       [0]    TOUTPS1_bit
0x0012       [0]    TOUTPS0_bit
0x0012       [0]    TOUTPS3_bit
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0014       [0]    SSPM3_bit
0x0014       [0]    SSPOV_bit
0x0014       [0]    CKP_bit
0x0014       [0]    SSPEN_bit
0x0014       [0]    SSPM1_bit
0x0014       [0]    SSPM0_bit
0x0014       [0]    SSPM2_bit
0x0014       [0]    WCOL_bit
0x0015       [1]    CCPR1L
0x0015       [2]    CCPR1
0x0016       [1]    CCPR1H
0x0017       [0]    CCP1M2_bit
0x0017       [0]    CCP1Y_bit
0x0017       [0]    CCP1M3_bit
0x0017       [1]    CCP1CON
0x0017       [0]    CCP1M1_bit
0x0017       [0]    CCP1X_bit
0x0017       [0]    CCP1M0_bit
0x0018       [0]    ADDEN_bit
0x0018       [0]    CREN_bit
0x0018       [0]    SREN_bit
0x0018       [0]    RX9_bit
0x0018       [0]    SPEN_bit
0x0018       [0]    RC9_bit
0x0018       [0]    RC8_9_bit
0x0018       [0]    NOT_RC8_bit
0x0018       [0]    FERR_bit
0x0018       [0]    RX9D_bit
0x0018       [0]    RCD8_bit
0x0018       [1]    RCSTA
0x0018       [0]    OERR_bit
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001B       [1]    CCPR2L
0x001B       [2]    CCPR2
0x001C       [1]    CCPR2H
0x001D       [0]    CCP2M1_bit
0x001D       [0]    CCP2M2_bit
0x001D       [1]    CCP2CON
0x001D       [0]    CCP2M0_bit
0x001D       [0]    CCP2M3_bit
0x001D       [0]    CCP2Y_bit
0x001D       [0]    CCP2X_bit
0x001E       [1]    ADRESH
0x001F       [0]    NOT_DONE_bit
0x001F       [0]    ADCS0_bit
0x001F       [0]    CHS2_bit
0x001F       [0]    CHS0_bit
0x001F       [0]    GO_bit
0x001F       [0]    CHS1_bit
0x001F       [0]    ADON_bit
0x001F       [1]    ADCON0
0x001F       [0]    ADCS1_bit
0x001F       [0]    GO_DONE_bit
0x0023       [1]    _adj_count
0x0024       [1]    _run_prog
0x0025       [1]    _new_prog
0x0026       [1]    _adj_num
0x0027       [1]    _horas_2
0x0028       [1]    _flagsA
0x0029       [1]    _minutos_1
0x002A       [1]    _minutos_3
0x002B       [1]    _horas_3
0x002C       [1]    _minutos_2
0x002D       [1]    _feed_count2
0x002E       [1]    multiplex_control_L0
0x002F       [1]    _segundos_0
0x0030       [1]    _mn_disp
0x0031       [1]    _hr_disp
0x0032       [1]    _feed_count
0x0033       [1]    _counter_bk
0x0034       [2]    _counter_T0
0x0036       [1]    _horas_0
0x0037       [1]    _minutos_0
0x0038       [1]    _horas_1
0x0039       [1]    ___savePCLATH
0x003A       [1]    ___saveSTATUS
0x003B       [1]    _cen
0x003C       [1]    _mil
0x003D       [1]    _uni
0x003E       [1]    _dez
0x003F       [2]    ___DoICPAddr
0x0041       [1]    FARG_disp_cath_num
0x0042      [10]    disp_cath_segmento_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0081       [0]    T0SE_bit
0x0081       [0]    NOT_RBPU_bit
0x0081       [0]    INTEDG_bit
0x0081       [0]    T0CS_bit
0x0081       [0]    PS1_bit
0x0081       [0]    PS0_bit
0x0081       [0]    PSA_bit
0x0081       [0]    PS2_bit
0x0085       [1]    TRISA
0x0085       [0]    TRISA2_bit
0x0085       [0]    TRISA1_bit
0x0085       [0]    TRISA0_bit
0x0085       [0]    TRISA5_bit
0x0085       [0]    TRISA4_bit
0x0085       [0]    TRISA3_bit
0x0086       [0]    TRISB2_bit
0x0086       [0]    TRISB7_bit
0x0086       [0]    TRISB6_bit
0x0086       [1]    TRISB
0x0086       [0]    TRISB0_bit
0x0086       [0]    TRISB1_bit
0x0086       [0]    TRISB4_bit
0x0086       [0]    TRISB3_bit
0x0086       [0]    TRISB5_bit
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC7_bit
0x0087       [1]    TRISC
0x0087       [0]    TRISC2_bit
0x0087       [0]    TRISC1_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC0_bit
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC3_bit
0x008C       [0]    TXIE_bit
0x008C       [0]    TMR2IE_bit
0x008C       [1]    PIE1
0x008C       [0]    ADIE_bit
0x008C       [0]    TMR1IE_bit
0x008C       [0]    SSPIE_bit
0x008C       [0]    CCP1IE_bit
0x008C       [0]    RCIE_bit
0x008D       [1]    PIE2
0x008D       [0]    EEIE_bit
0x008D       [0]    CMIE_bit
0x008D       [0]    BCLIE_bit
0x008D       [0]    CCP2IE_bit
0x008E       [0]    NOT_POR_bit
0x008E       [1]    PCON
0x008E       [0]    NOT_BOR_bit
0x008E       [0]    NOT_BO_bit
0x0091       [0]    GCEN_bit
0x0091       [0]    RCEN_bit
0x0091       [0]    ACKEN_bit
0x0091       [0]    PEN_bit
0x0091       [0]    SEN_bit
0x0091       [0]    RSEN_bit
0x0091       [1]    SSPCON2
0x0091       [0]    ACKDT_bit
0x0091       [0]    ACKSTAT_bit
0x0092       [1]    PR2
0x0093       [1]    SSPADD
0x0094       [0]    UA_bit
0x0094       [0]    BF_bit
0x0094       [0]    NOT_WRITE_bit
0x0094       [0]    READ_WRITE_bit
0x0094       [0]    R_W_bit
0x0094       [0]    NOT_W_bit
0x0094       [0]    NOT_ADDRESS_bit
0x0094       [0]    NOT_A_bit
0x0094       [1]    SSPSTAT
0x0094       [0]    CKE_bit
0x0094       [0]    SMP_bit
0x0094       [0]    I2C_DATA_bit
0x0094       [0]    D_bit
0x0094       [0]    I2C_START__bit
0x0094       [0]    S_bit
0x0094       [0]    I2C_READ_bit
0x0094       [0]    R_bit
0x0094       [0]    I2C_STOP__bit
0x0094       [0]    D_A_bit
0x0094       [0]    DATA_ADDRESS_bit
0x0094       [0]    P_bit
0x0098       [1]    TXSTA
0x0098       [0]    SYNC_bit
0x0098       [0]    TXEN_bit
0x0098       [0]    TX8_9_bit
0x0098       [0]    TXD8_bit
0x0098       [0]    TX9D_bit
0x0098       [0]    TRMT_bit
0x0098       [0]    BRGH_bit
0x0098       [0]    CSRC_bit
0x0098       [0]    TX9_bit
0x0098       [0]    NOT_TX8_bit
0x0099       [1]    SPBRG
0x009C       [0]    CM1_bit
0x009C       [0]    CM2_bit
0x009C       [1]    CMCON
0x009C       [0]    CM0_bit
0x009C       [0]    C2OUT_bit
0x009C       [0]    C1INV_bit
0x009C       [0]    CIS_bit
0x009C       [0]    C1OUT_bit
0x009C       [0]    C2INV_bit
0x009D       [0]    CVROE_bit
0x009D       [0]    CVRR_bit
0x009D       [0]    CVREN_bit
0x009D       [1]    CVRCON
0x009D       [0]    CVR1_bit
0x009D       [0]    CVR0_bit
0x009D       [0]    CVR3_bit
0x009D       [0]    CVR2_bit
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
0x009F       [0]    PCFG3_bit
0x009F       [0]    ADFM_bit
0x009F       [0]    ADCS2_bit
0x009F       [0]    PCFG1_bit
0x009F       [0]    PCFG0_bit
0x009F       [0]    PCFG2_bit
0x010C       [1]    EEDATA
0x010D       [1]    EEADR
0x010E       [1]    EEDATH
0x010F       [1]    EEADRH
0x018C       [1]    EECON1
0x018C       [0]    EEPGD_bit
0x018C       [0]    RD_bit
0x018C       [0]    WREN_bit
0x018C       [0]    WR_bit
0x018C       [0]    WRERR_bit
0x018D       [1]    EECON2
//** Label List: ** 
//----------------------------------------------
  L_relogio0
  L_relogio1
  L_relogio2
  L_check_clk3
  L_check_clk4
  L_check_clk5
  L_check_clk6
  L_check_clk7
  L_check_clk8
  L_check_clk9
  L_check_clk10
  L_check_clk11
  L__check_clk12
  L__check_clk13
  L__check_clk14
  _relogio
  _check_clk
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_main10
  L_main11
  L_main12
  L_update_data13
  L_update_data14
  L_update_data15
  L_update_data16
  L_update_data17
  L_update_data18
  L_update_data19
  L_update_data20
  L_update_data21
  L_update_data22
  L_update_data23
  L_update_data24
  L_update_data25
  L_update_data26
  L_read_bts27
  L_read_bts28
  L_read_bts29
  L_read_bts30
  L_read_bts31
  L_read_bts32
  L_read_bts33
  L_read_bts34
  L_read_bts35
  L_read_bts36
  L_read_bts37
  L_read_bts38
  L_read_bts39
  L_read_bts40
  L_read_bts41
  L_read_bts42
  L_read_bts43
  L_read_bts44
  L_read_bts45
  L_read_bts46
  L_read_bts47
  L_read_bts48
  L_read_bts49
  L_read_bts50
  L_read_bts51
  L_read_bts52
  L_read_bts53
  L_read_bts54
  L_read_bts55
  L_read_bts56
  L_read_bts57
  L_read_bts58
  L_read_bts59
  L_read_bts60
  L_read_bts61
  L_read_bts62
  L_read_bts63
  L_read_bts64
  L_read_bts65
  L_read_bts66
  L_read_bts67
  L_read_bts68
  L_read_bts69
  L_read_bts70
  L_read_bts71
  L_read_bts72
  L_read_bts73
  L_read_bts74
  L_read_bts75
  L_read_bts76
  L_read_bts77
  L_read_bts78
  L_read_bts79
  L_read_bts80
  L_read_bts81
  L_read_bts82
  L_multiplex83
  L_multiplex84
  L_multiplex85
  L_multiplex86
  L_multiplex87
  L_multiplex88
  L_multiplex89
  L_multiplex90
  L_multiplex91
  L_multiplex92
  L_multiplex93
  L_multiplex94
  L_multiplex95
  L_multiplex96
  L_multiplex97
  L_multiplex98
  L_multiplex99
  L_multiplex100
  L_multiplex101
  L_multiplex102
  L_multiplex103
  L_multiplex104
  L_multiplex105
  L_multiplex106
  L_multiplex107
  L_multiplex108
  L_multiplex109
  L_multiplex110
  L_multiplex111
  L_multiplex112
  L_multiplex113
  L_multiplex114
  L_multiplex115
  L_multiplex116
  L_multiplex117
  L_multiplex118
  L_multiplex119
  L_multiplex120
  L_multiplex121
  L_multiplex122
  L_multiplex123
  L_multiplex124
  L_multiplex125
  L_multiplex126
  L_multiplex127
  L_multiplex128
  L_multiplex129
  L_multiplex130
  L_multiplex131
  L_multiplex132
  L_multiplex133
  L_multiplex134
  L_multiplex135
  L_multiplex136
  L_multiplex137
  L_multiplex138
  L_multiplex139
  L_multiplex140
  L_multiplex141
  L_multiplex142
  L_multiplex143
  L_multiplex144
  L_multiplex145
  L_multiplex146
  L_multiplex147
  L__read_bts148
  L__read_bts149
  L__read_bts150
  L__multiplex151
  L__multiplex152
  L__multiplex153
  L__multiplex154
  L__multiplex155
  L__multiplex156
  L__multiplex157
  L__multiplex158
  L__multiplex159
  _interrupt
  L__interrupt160
  L__interrupt161
  _main
  L__main162
  L__main163
  _update_data
  _read_bts
  _multiplex
  _disp_cath
  _CC2D_Loop1
  _____DoICP
  _____DoIFC
  ___CC2DW
  _Swap
  L_relogio0
  L_relogio1
  L_relogio2
  L_check_clk3
  L_check_clk4
  L_check_clk5
  L_check_clk6
  L_check_clk7
  L_check_clk8
  L_check_clk9
  L_check_clk10
  L_check_clk11
  L__check_clk12
  L__check_clk13
  L__check_clk14
  _relogio
  _check_clk
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_main10
  L_main11
  L_main12
  L_update_data13
  L_update_data14
  L_update_data15
  L_update_data16
  L_update_data17
  L_update_data18
  L_update_data19
  L_update_data20
  L_update_data21
  L_update_data22
  L_update_data23
  L_update_data24
  L_update_data25
  L_update_data26
  L_read_bts27
  L_read_bts28
  L_read_bts29
  L_read_bts30
  L_read_bts31
  L_read_bts32
  L_read_bts33
  L_read_bts34
  L_read_bts35
  L_read_bts36
  L_read_bts37
  L_read_bts38
  L_read_bts39
  L_read_bts40
  L_read_bts41
  L_read_bts42
  L_read_bts43
  L_read_bts44
  L_read_bts45
  L_read_bts46
  L_read_bts47
  L_read_bts48
  L_read_bts49
  L_read_bts50
  L_read_bts51
  L_read_bts52
  L_read_bts53
  L_read_bts54
  L_read_bts55
  L_read_bts56
  L_read_bts57
  L_read_bts58
  L_read_bts59
  L_read_bts60
  L_read_bts61
  L_read_bts62
  L_read_bts63
  L_read_bts64
  L_read_bts65
  L_read_bts66
  L_read_bts67
  L_read_bts68
  L_read_bts69
  L_read_bts70
  L_read_bts71
  L_read_bts72
  L_read_bts73
  L_read_bts74
  L_read_bts75
  L_read_bts76
  L_read_bts77
  L_read_bts78
  L_read_bts79
  L_read_bts80
  L_read_bts81
  L_read_bts82
  L_multiplex83
  L_multiplex84
  L_multiplex85
  L_multiplex86
  L_multiplex87
  L_multiplex88
  L_multiplex89
  L_multiplex90
  L_multiplex91
  L_multiplex92
  L_multiplex93
  L_multiplex94
  L_multiplex95
  L_multiplex96
  L_multiplex97
  L_multiplex98
  L_multiplex99
  L_multiplex100
  L_multiplex101
  L_multiplex102
  L_multiplex103
  L_multiplex104
  L_multiplex105
  L_multiplex106
  L_multiplex107
  L_multiplex108
  L_multiplex109
  L_multiplex110
  L_multiplex111
  L_multiplex112
  L_multiplex113
  L_multiplex114
  L_multiplex115
  L_multiplex116
  L_multiplex117
  L_multiplex118
  L_multiplex119
  L_multiplex120
  L_multiplex121
  L_multiplex122
  L_multiplex123
  L_multiplex124
  L_multiplex125
  L_multiplex126
  L_multiplex127
  L_multiplex128
  L_multiplex129
  L_multiplex130
  L_multiplex131
  L_multiplex132
  L_multiplex133
  L_multiplex134
  L_multiplex135
  L_multiplex136
  L_multiplex137
  L_multiplex138
  L_multiplex139
  L_multiplex140
  L_multiplex141
  L_multiplex142
  L_multiplex143
  L_multiplex144
  L_multiplex145
  L_multiplex146
  L_multiplex147
  L__read_bts148
  L__read_bts149
  L__read_bts150
  L__multiplex151
  L__multiplex152
  L__multiplex153
  L__multiplex154
  L__multiplex155
  L__multiplex156
  L__multiplex157
  L__multiplex158
  L__multiplex159
  _interrupt
  L__interrupt160
  L__interrupt161
  _main
  L__main162
  L__main163
  _update_data
  _read_bts
  _multiplex
  _disp_cath
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  _Mul_8x8_U
  _Mul_16x16_U
  _Div_8x8_U
  _Div_16x16_U
  _Mul_8x8_S
  _Mul_16x16_S
  _Div_16x16_S_L
  _Div_16x16_S
  _Div_8x8_S
  _SDIV3232L
  _COMFREM
  _Div_32x32_S
  _Div_32x32_U
  _Mul_32x32_U
  _Mul_32x32_S
